{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/paul/gallery-prismic/utils/prismicHelpers.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Prismic from '@prismicio/client';\nimport Link from 'next/link';\nimport { apiEndpoint, accessToken, linkResolver, hrefResolver } from '..'; // Helper function to convert Prismic Rich Text links to Next/Link components\n\nexport const customLink = (type, element, content, children, index) => /*#__PURE__*/_jsxDEV(Link, {\n  href: hrefResolver(element.data),\n  as: linkResolver(element.data),\n  children: /*#__PURE__*/_jsxDEV(\"a\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, index, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this); // Client method to query documents from the Prismic repo\n\nexport const Client = (req = null) => Prismic.client(apiEndpoint, createClientOptions(req, accessToken));\n\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? {\n    req\n  } : {};\n  const accessTokenOption = prismicAccessToken ? {\n    accessToken: prismicAccessToken\n  } : {};\n  return _objectSpread(_objectSpread({}, reqOption), accessTokenOption);\n};\n\nexport default Client;","map":{"version":3,"sources":["/Users/paul/gallery-prismic/utils/prismicHelpers.js"],"names":["Prismic","Link","apiEndpoint","accessToken","linkResolver","hrefResolver","customLink","type","element","content","children","index","data","Client","req","client","createClientOptions","prismicAccessToken","reqOption","accessTokenOption"],"mappings":";;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,mBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,YAAjD,QAAqE,IAArE,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,KAAnC,kBACxB,QAAC,IAAD;AAEE,EAAA,IAAI,EAAEN,YAAY,CAACG,OAAO,CAACI,IAAT,CAFpB;AAGE,EAAA,EAAE,EAAER,YAAY,CAACI,OAAO,CAACI,IAAT,CAHlB;AAAA,yBAKE;AAAA,cAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA;AALF,GACOE,KADP;AAAA;AAAA;AAAA;AAAA,QADK,C,CAUP;;AACA,OAAO,MAAME,MAAM,GAAG,CAACC,GAAG,GAAG,IAAP,KACpBd,OAAO,CAACe,MAAR,CAAeb,WAAf,EAA4Bc,mBAAmB,CAACF,GAAD,EAAMX,WAAN,CAA/C,CADK;;AAIP,MAAMa,mBAAmB,GAAG,CAACF,GAAG,GAAG,IAAP,EAAaG,kBAAkB,GAAG,IAAlC,KAA2C;AACrE,QAAMC,SAAS,GAAGJ,GAAG,GAAG;AAAEA,IAAAA;AAAF,GAAH,GAAa,EAAlC;AACA,QAAMK,iBAAiB,GAAGF,kBAAkB,GAAG;AAAEd,IAAAA,WAAW,EAAEc;AAAf,GAAH,GAAyC,EAArF;AACA,yCACKC,SADL,GAEKC,iBAFL;AAID,CAPD;;AASA,eAAeN,MAAf","sourcesContent":["import Prismic from '@prismicio/client'\nimport Link from 'next/link'\nimport { apiEndpoint, accessToken, linkResolver, hrefResolver } from '..'\n\n// Helper function to convert Prismic Rich Text links to Next/Link components\nexport const customLink = (type, element, content, children, index) => (\n  <Link\n    key={index}\n    href={hrefResolver(element.data)}\n    as={linkResolver(element.data)}\n  >\n    <a>{content}</a>\n  </Link>\n)\n\n// Client method to query documents from the Prismic repo\nexport const Client = (req = null) => (\n  Prismic.client(apiEndpoint, createClientOptions(req, accessToken))\n)\n\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? { req } : {}\n  const accessTokenOption = prismicAccessToken ? { accessToken: prismicAccessToken } : {}\n  return {\n    ...reqOption,\n    ...accessTokenOption,\n  }\n}\n\nexport default Client"]},"metadata":{},"sourceType":"module"}