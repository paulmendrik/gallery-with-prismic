webpackHotUpdate_N_E("pages/press/[uid]",{

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var __self__ = (function (root) {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = root.DOMException\n}\nF.prototype = root;\nreturn new F();\n})(typeof self !== 'undefined' ? self : this);\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  return exports;\n\n}({}));\n})(__self__);\ndelete __self__.fetch.polyfill\nexports = __self__.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = __self__.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = __self__.Headers\nexports.Request = __self__.Request\nexports.Response = __self__.Response\nmodule.exports = exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cross-fetch/dist/browser-ponyfill.js\n");

/***/ }),

/***/ "./node_modules/prismic-javascript/esm/prismic-javascript.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/prismic-javascript/esm/prismic-javascript.mjs ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar Variation = /** @class */ (function () {\n    function Variation(data) {\n        this.data = {};\n        this.data = data;\n    }\n    Variation.prototype.id = function () {\n        return this.data.id;\n    };\n    Variation.prototype.ref = function () {\n        return this.data.ref;\n    };\n    Variation.prototype.label = function () {\n        return this.data.label;\n    };\n    return Variation;\n}());\nvar Experiment = /** @class */ (function () {\n    function Experiment(data) {\n        this.data = {};\n        this.data = data;\n        this.variations = (data.variations || []).map(function (v) {\n            return new Variation(v);\n        });\n    }\n    Experiment.prototype.id = function () {\n        return this.data.id;\n    };\n    Experiment.prototype.googleId = function () {\n        return this.data.googleId;\n    };\n    Experiment.prototype.name = function () {\n        return this.data.name;\n    };\n    return Experiment;\n}());\nvar Experiments = /** @class */ (function () {\n    function Experiments(data) {\n        if (data) {\n            this.drafts = (data.drafts || []).map(function (exp) {\n                return new Experiment(exp);\n            });\n            this.running = (data.running || []).map(function (exp) {\n                return new Experiment(exp);\n            });\n        }\n    }\n    Experiments.prototype.current = function () {\n        if (this.running.length > 0) {\n            return this.running[0];\n        }\n        else {\n            return null;\n        }\n    };\n    Experiments.prototype.refFromCookie = function (cookie) {\n        if (!cookie || cookie.trim() === '')\n            return null;\n        var splitted = cookie.trim().split(' ');\n        if (splitted.length < 2)\n            return null;\n        var expId = splitted[0];\n        var varIndex = parseInt(splitted[1], 10);\n        var exp = this.running.filter(function (exp) {\n            return exp.googleId() === expId && exp.variations.length > varIndex;\n        })[0];\n        return exp ? exp.variations[varIndex].ref() : null;\n    };\n    return Experiments;\n}());\n\nvar LazySearchForm = /** @class */ (function () {\n    function LazySearchForm(id, api) {\n        this.id = id;\n        this.api = api;\n        this.fields = {};\n    }\n    LazySearchForm.prototype.set = function (key, value) {\n        this.fields[key] = value;\n        return this;\n    };\n    LazySearchForm.prototype.ref = function (ref) {\n        return this.set('ref', ref);\n    };\n    LazySearchForm.prototype.query = function (query) {\n        return this.set('q', query);\n    };\n    LazySearchForm.prototype.pageSize = function (size) {\n        return this.set('pageSize', size);\n    };\n    LazySearchForm.prototype.fetch = function (fields) {\n        console.warn('Warning: Using Fetch is deprecated. Use the property `graphQuery` instead.');\n        return this.set('fetch', fields);\n    };\n    LazySearchForm.prototype.fetchLinks = function (fields) {\n        console.warn('Warning: Using FetchLinks is deprecated. Use the property `graphQuery` instead.');\n        return this.set('fetchLinks', fields);\n    };\n    LazySearchForm.prototype.graphQuery = function (query) {\n        return this.set('graphQuery', query);\n    };\n    LazySearchForm.prototype.lang = function (langCode) {\n        return this.set('lang', langCode);\n    };\n    LazySearchForm.prototype.page = function (p) {\n        return this.set('page', p);\n    };\n    LazySearchForm.prototype.after = function (documentId) {\n        return this.set('after', documentId);\n    };\n    LazySearchForm.prototype.orderings = function (orderings) {\n        return this.set('orderings', orderings);\n    };\n    LazySearchForm.prototype.url = function () {\n        var _this = this;\n        return this.api.get().then(function (api) {\n            return LazySearchForm.toSearchForm(_this, api).url();\n        });\n    };\n    LazySearchForm.prototype.submit = function (cb) {\n        var _this = this;\n        return this.api.get().then(function (api) {\n            return LazySearchForm.toSearchForm(_this, api).submit(cb);\n        });\n    };\n    LazySearchForm.toSearchForm = function (lazyForm, api) {\n        var form = api.form(lazyForm.id);\n        if (form) {\n            return Object.keys(lazyForm.fields).reduce(function (form, fieldKey) {\n                var fieldValue = lazyForm.fields[fieldKey];\n                if (fieldKey === 'q') {\n                    return form.query(fieldValue);\n                }\n                else if (fieldKey === 'pageSize') {\n                    return form.pageSize(fieldValue);\n                }\n                else if (fieldKey === 'fetch') {\n                    return form.fetch(fieldValue);\n                }\n                else if (fieldKey === 'fetchLinks') {\n                    return form.fetchLinks(fieldValue);\n                }\n                else if (fieldKey === 'graphQuery') {\n                    return form.graphQuery(fieldValue);\n                }\n                else if (fieldKey === 'lang') {\n                    return form.lang(fieldValue);\n                }\n                else if (fieldKey === 'page') {\n                    return form.page(fieldValue);\n                }\n                else if (fieldKey === 'after') {\n                    return form.after(fieldValue);\n                }\n                else if (fieldKey === 'orderings') {\n                    return form.orderings(fieldValue);\n                }\n                else {\n                    return form.set(fieldKey, fieldValue);\n                }\n            }, form);\n        }\n        else {\n            throw new Error(\"Unable to access to form \" + lazyForm.id);\n        }\n    };\n    return LazySearchForm;\n}());\nvar SearchForm = /** @class */ (function () {\n    function SearchForm(form, httpClient) {\n        this.httpClient = httpClient;\n        this.form = form;\n        this.data = {};\n        for (var field in form.fields) {\n            if (form.fields[field]['default']) {\n                this.data[field] = [form.fields[field]['default']];\n            }\n        }\n    }\n    SearchForm.prototype.set = function (field, value) {\n        var fieldDesc = this.form.fields[field];\n        if (!fieldDesc)\n            throw new Error('Unknown field ' + field);\n        var checkedValue = value === '' || value === undefined ? null : value;\n        var values = this.data[field] || [];\n        if (fieldDesc.multiple) {\n            values = checkedValue ? values.concat([checkedValue]) : values;\n        }\n        else {\n            values = checkedValue ? [checkedValue] : values;\n        }\n        this.data[field] = values;\n        return this;\n    };\n    /**\n     * Sets a ref to query on for this SearchForm. This is a mandatory\n     * method to call before calling submit(), and api.form('everything').submit()\n     * will not work.\n     */\n    SearchForm.prototype.ref = function (ref) {\n        return this.set('ref', ref);\n    };\n    /**\n     * Sets a predicate-based query for this SearchForm. This is where you\n     * paste what you compose in your prismic.io API browser.\n     */\n    SearchForm.prototype.query = function (query) {\n        if (typeof query === 'string') {\n            return this.query([query]);\n        }\n        else if (Array.isArray(query)) {\n            return this.set('q', \"[\" + query.join('') + \"]\");\n        }\n        else {\n            throw new Error(\"Invalid query : \" + query);\n        }\n    };\n    /**\n     * Sets a page size to query for this SearchForm. This is an optional method.\n     *\n     * @param {number} size - The page size\n     * @returns {SearchForm} - The SearchForm itself\n     */\n    SearchForm.prototype.pageSize = function (size) {\n        return this.set('pageSize', size);\n    };\n    /**\n     * Restrict the results document to the specified fields\n     */\n    SearchForm.prototype.fetch = function (fields) {\n        console.warn('Warning: Using Fetch is deprecated. Use the property `graphQuery` instead.');\n        var strFields = Array.isArray(fields) ? fields.join(',') : fields;\n        return this.set('fetch', strFields);\n    };\n    /**\n     * Include the requested fields in the DocumentLink instances in the result\n     */\n    SearchForm.prototype.fetchLinks = function (fields) {\n        console.warn('Warning: Using FetchLinks is deprecated. Use the property `graphQuery` instead.');\n        var strFields = Array.isArray(fields) ? fields.join(',') : fields;\n        return this.set('fetchLinks', strFields);\n    };\n    /**\n     * Sets the graphquery to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.graphQuery = function (query) {\n        return this.set('graphQuery', query);\n    };\n    /**\n     * Sets the language to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.lang = function (langCode) {\n        return this.set('lang', langCode);\n    };\n    /**\n     * Sets the page number to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.page = function (p) {\n        return this.set('page', p);\n    };\n    /**\n     * Remove all the documents except for those after the specified document in the list. This is an optional method.\n     */\n    SearchForm.prototype.after = function (documentId) {\n        return this.set('after', documentId);\n    };\n    /**\n     * Sets the orderings to query for this SearchForm. This is an optional method.\n     */\n    SearchForm.prototype.orderings = function (orderings) {\n        if (!orderings) {\n            return this;\n        }\n        else {\n            return this.set('orderings', \"[\" + orderings.join(',') + \"]\");\n        }\n    };\n    /**\n     * Build the URL to query\n     */\n    SearchForm.prototype.url = function () {\n        var url = this.form.action;\n        if (this.data) {\n            var sep = (url.indexOf('?') > -1 ? '&' : '?');\n            for (var key in this.data) {\n                if (Object.prototype.hasOwnProperty.call(this.data, key)) {\n                    var values = this.data[key];\n                    if (values) {\n                        for (var i = 0; i < values.length; i++) {\n                            url += sep + key + '=' + encodeURIComponent(values[i]);\n                            sep = '&';\n                        }\n                    }\n                }\n            }\n        }\n        return url;\n    };\n    /**\n     * Submits the query, and calls the callback function.\n     */\n    SearchForm.prototype.submit = function (cb) {\n        return this.httpClient.cachedRequest(this.url()).then(function (response) {\n            cb && cb(null, response);\n            return response;\n        }).catch(function (error) {\n            cb && cb(error);\n            throw error;\n        });\n    };\n    return SearchForm;\n}());\n\nvar OPERATOR = {\n    at: 'at',\n    not: 'not',\n    missing: 'missing',\n    has: 'has',\n    any: 'any',\n    in: 'in',\n    fulltext: 'fulltext',\n    similar: 'similar',\n    numberGt: 'number.gt',\n    numberLt: 'number.lt',\n    numberInRange: 'number.inRange',\n    dateBefore: 'date.before',\n    dateAfter: 'date.after',\n    dateBetween: 'date.between',\n    dateDayOfMonth: 'date.day-of-month',\n    dateDayOfMonthAfter: 'date.day-of-month-after',\n    dateDayOfMonthBefore: 'date.day-of-month-before',\n    dateDayOfWeek: 'date.day-of-week',\n    dateDayOfWeekAfter: 'date.day-of-week-after',\n    dateDayOfWeekBefore: 'date.day-of-week-before',\n    dateMonth: 'date.month',\n    dateMonthBefore: 'date.month-before',\n    dateMonthAfter: 'date.month-after',\n    dateYear: 'date.year',\n    dateHour: 'date.hour',\n    dateHourBefore: 'date.hour-before',\n    dateHourAfter: 'date.hour-after',\n    GeopointNear: 'geopoint.near',\n};\nfunction encode(value) {\n    if (typeof value === 'string') {\n        return \"\\\"\" + value + \"\\\"\";\n    }\n    else if (typeof value === 'number') {\n        return value.toString();\n    }\n    else if (value instanceof Date) {\n        return value.getTime().toString();\n    }\n    else if (Array.isArray(value)) {\n        return \"[\" + value.map(function (v) { return encode(v); }).join(',') + \"]\";\n    }\n    else if (typeof value === \"boolean\") {\n        return value.toString();\n    }\n    else {\n        throw new Error(\"Unable to encode \" + value + \" of type \" + typeof value);\n    }\n}\nvar geopoint = {\n    near: function (fragment, latitude, longitude, radius) {\n        return \"[\" + OPERATOR.GeopointNear + \"(\" + fragment + \", \" + latitude + \", \" + longitude + \", \" + radius + \")]\";\n    },\n};\nvar date = {\n    before: function (fragment, before) {\n        return \"[\" + OPERATOR.dateBefore + \"(\" + fragment + \", \" + encode(before) + \")]\";\n    },\n    after: function (fragment, after) {\n        return \"[\" + OPERATOR.dateAfter + \"(\" + fragment + \", \" + encode(after) + \")]\";\n    },\n    between: function (fragment, before, after) {\n        return \"[\" + OPERATOR.dateBetween + \"(\" + fragment + \", \" + encode(before) + \", \" + encode(after) + \")]\";\n    },\n    dayOfMonth: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfMonth + \"(\" + fragment + \", \" + day + \")]\";\n    },\n    dayOfMonthAfter: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfMonthAfter + \"(\" + fragment + \", \" + day + \")]\";\n    },\n    dayOfMonthBefore: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfMonthBefore + \"(\" + fragment + \", \" + day + \")]\";\n    },\n    dayOfWeek: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfWeek + \"(\" + fragment + \", \" + encode(day) + \")]\";\n    },\n    dayOfWeekAfter: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfWeekAfter + \"(\" + fragment + \", \" + encode(day) + \")]\";\n    },\n    dayOfWeekBefore: function (fragment, day) {\n        return \"[\" + OPERATOR.dateDayOfWeekBefore + \"(\" + fragment + \", \" + encode(day) + \")]\";\n    },\n    month: function (fragment, month) {\n        return \"[\" + OPERATOR.dateMonth + \"(\" + fragment + \", \" + encode(month) + \")]\";\n    },\n    monthBefore: function (fragment, month) {\n        return \"[\" + OPERATOR.dateMonthBefore + \"(\" + fragment + \", \" + encode(month) + \")]\";\n    },\n    monthAfter: function (fragment, month) {\n        return \"[\" + OPERATOR.dateMonthAfter + \"(\" + fragment + \", \" + encode(month) + \")]\";\n    },\n    year: function (fragment, year) {\n        return \"[\" + OPERATOR.dateYear + \"(\" + fragment + \", \" + year + \")]\";\n    },\n    hour: function (fragment, hour) {\n        return \"[\" + OPERATOR.dateHour + \"(\" + fragment + \", \" + hour + \")]\";\n    },\n    hourBefore: function (fragment, hour) {\n        return \"[\" + OPERATOR.dateHourBefore + \"(\" + fragment + \", \" + hour + \")]\";\n    },\n    hourAfter: function (fragment, hour) {\n        return \"[\" + OPERATOR.dateHourAfter + \"(\" + fragment + \", \" + hour + \")]\";\n    },\n};\nvar number = {\n    gt: function (fragment, value) {\n        return \"[\" + OPERATOR.numberGt + \"(\" + fragment + \", \" + value + \")]\";\n    },\n    lt: function (fragment, value) {\n        return \"[\" + OPERATOR.numberLt + \"(\" + fragment + \", \" + value + \")]\";\n    },\n    inRange: function (fragment, before, after) {\n        return \"[\" + OPERATOR.numberInRange + \"(\" + fragment + \", \" + before + \", \" + after + \")]\";\n    },\n};\nvar Predicates = {\n    at: function (fragment, value) {\n        return \"[\" + OPERATOR.at + \"(\" + fragment + \", \" + encode(value) + \")]\";\n    },\n    not: function (fragment, value) {\n        return \"[\" + OPERATOR.not + \"(\" + fragment + \", \" + encode(value) + \")]\";\n    },\n    missing: function (fragment) {\n        return \"[\" + OPERATOR.missing + \"(\" + fragment + \")]\";\n    },\n    has: function (fragment) {\n        return \"[\" + OPERATOR.has + \"(\" + fragment + \")]\";\n    },\n    any: function (fragment, values) {\n        return \"[\" + OPERATOR.any + \"(\" + fragment + \", \" + encode(values) + \")]\";\n    },\n    in: function (fragment, values) {\n        return \"[\" + OPERATOR.in + \"(\" + fragment + \", \" + encode(values) + \")]\";\n    },\n    fulltext: function (fragment, value) {\n        return \"[\" + OPERATOR.fulltext + \"(\" + fragment + \", \" + encode(value) + \")]\";\n    },\n    similar: function (documentId, maxResults) {\n        return \"[\" + OPERATOR.similar + \"(\\\"\" + documentId + \"\\\", \" + maxResults + \")]\";\n    },\n    date: date,\n    dateBefore: date.before,\n    dateAfter: date.after,\n    dateBetween: date.between,\n    dayOfMonth: date.dayOfMonth,\n    dayOfMonthAfter: date.dayOfMonthAfter,\n    dayOfMonthBefore: date.dayOfMonthBefore,\n    dayOfWeek: date.dayOfWeek,\n    dayOfWeekAfter: date.dayOfWeekAfter,\n    dayOfWeekBefore: date.dayOfWeekBefore,\n    month: date.month,\n    monthBefore: date.monthBefore,\n    monthAfter: date.monthAfter,\n    year: date.year,\n    hour: date.hour,\n    hourBefore: date.hourBefore,\n    hourAfter: date.hourAfter,\n    number: number,\n    gt: number.gt,\n    lt: number.lt,\n    inRange: number.inRange,\n    near: geopoint.near,\n    geopoint: geopoint,\n};\n\n/* eslint-disable */\n// Some portions of code from https://github.com/jshttp/cookie\nvar decode = decodeURIComponent;\nfunction tryDecode(str, decode) {\n    try {\n        return decode(str);\n    }\n    catch (e) {\n        return str;\n    }\n}\nfunction parse(str, options) {\n    if (typeof str !== 'string') {\n        throw new TypeError('argument str must be a string');\n    }\n    var obj = {};\n    var opt = options || {};\n    var pairs = str.split(/; */);\n    var dec = opt.decode || decode;\n    pairs.forEach(function (pair) {\n        var eq_idx = pair.indexOf('=');\n        // skip things that don't look like key=value\n        if (eq_idx < 0) {\n            return;\n        }\n        var key = pair.substr(0, eq_idx).trim();\n        var val = pair.substr(++eq_idx, pair.length).trim();\n        // quoted values\n        if ('\"' == val[0]) {\n            val = val.slice(1, -1);\n        }\n        // only assign once\n        if (undefined == obj[key]) {\n            obj[key] = tryDecode(val, dec);\n        }\n    });\n    return obj;\n}\nvar Cookies = { parse: parse };\n\nfunction createPreviewResolver(token, documentId, getDocByID) {\n    var resolve = function (linkResolver, defaultUrl, cb) {\n        if (documentId && getDocByID) {\n            return getDocByID(documentId, { ref: token }).then(function (document) {\n                if (!document) {\n                    cb && cb(null, defaultUrl);\n                    return defaultUrl;\n                }\n                else {\n                    var url = (linkResolver && linkResolver(document)) || document.url || defaultUrl;\n                    cb && cb(null, url);\n                    return url;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(defaultUrl);\n        }\n    };\n    return { token: token, documentId: documentId, resolve: resolve };\n}\n\nvar PREVIEW_COOKIE = 'io.prismic.preview';\nvar EXPERIMENT_COOKIE = 'io.prismic.experiment';\nvar ResolvedApi = /** @class */ (function () {\n    function ResolvedApi(data, httpClient, options) {\n        this.data = data;\n        this.masterRef = data.refs.filter(function (ref) { return ref.isMasterRef; })[0];\n        this.experiments = new Experiments(data.experiments);\n        this.bookmarks = data.bookmarks;\n        this.httpClient = httpClient;\n        this.options = options;\n        this.refs = data.refs;\n        this.tags = data.tags;\n        this.types = data.types;\n        this.languages = data.languages;\n    }\n    /**\n     * Returns a useable form from its id, as described in the RESTful description of the API.\n     * For instance: api.form(\"everything\") works on every repository (as \"everything\" exists by default)\n     * You can then chain the calls: api.form(\"everything\").query('[[:d = at(document.id, \"UkL0gMuvzYUANCpf\")]]').ref(ref).submit()\n     */\n    ResolvedApi.prototype.form = function (formId) {\n        var form = this.data.forms[formId];\n        if (form) {\n            return new SearchForm(form, this.httpClient);\n        }\n        return null;\n    };\n    ResolvedApi.prototype.everything = function () {\n        var f = this.form('everything');\n        if (!f)\n            throw new Error('Missing everything form');\n        return f;\n    };\n    /**\n     * The ID of the master ref on this prismic.io API.\n     * Do not use like this: searchForm.ref(api.master()).\n     * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\n     */\n    ResolvedApi.prototype.master = function () {\n        return this.masterRef.ref;\n    };\n    /**\n     * Returns the ref ID for a given ref's label.\n     * Do not use like this: searchForm.ref(api.ref(\"Future release label\")).\n     * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.\n     */\n    ResolvedApi.prototype.ref = function (label) {\n        var ref = this.data.refs.filter(function (ref) { return ref.label === label; })[0];\n        return ref ? ref.ref : null;\n    };\n    ResolvedApi.prototype.currentExperiment = function () {\n        return this.experiments.current();\n    };\n    /**\n     * Query the repository\n     */\n    ResolvedApi.prototype.query = function (q, optionsOrCallback, cb) {\n        if (cb === void 0) { cb = function () { }; }\n        var _a = typeof optionsOrCallback === 'function'\n            ? { options: {}, callback: optionsOrCallback }\n            : { options: optionsOrCallback || {}, callback: cb }, options = _a.options, callback = _a.callback;\n        var form = this.everything();\n        for (var key in options) {\n            form = form.set(key, options[key]);\n        }\n        if (!options.ref) {\n            // Look in cookies if we have a ref (preview or experiment)\n            var cookieString = '';\n            if (this.options.req) { // NodeJS\n                cookieString = this.options.req.headers['cookie'] || '';\n            }\n            else if (typeof window !== 'undefined' && window.document) { // Browser\n                cookieString = window.document.cookie || '';\n            }\n            var cookies = Cookies.parse(cookieString);\n            var previewRef = cookies[PREVIEW_COOKIE];\n            var experimentRef = this.experiments.refFromCookie(cookies[EXPERIMENT_COOKIE]);\n            form = form.ref(previewRef || experimentRef || this.masterRef.ref);\n        }\n        if (q) {\n            form.query(q);\n        }\n        return form.submit(callback);\n    };\n    /**\n     * Retrieve the document returned by the given query\n     * @param {string|array|Predicate} the query\n     * @param {object} additional parameters. In NodeJS, pass the request as 'req'.\n     * @param {function} callback(err, doc)\n     */\n    ResolvedApi.prototype.queryFirst = function (q, optionsOrCallback, cb) {\n        var _a = typeof optionsOrCallback === 'function'\n            ? { options: {}, callback: optionsOrCallback }\n            : { options: optionsOrCallback || {}, callback: cb || (function () { }) }, options = _a.options, callback = _a.callback;\n        options.page = 1;\n        options.pageSize = 1;\n        return this.query(q, options).then(function (response) {\n            var document = response && response.results && response.results[0];\n            callback(null, document);\n            return document;\n        }).catch(function (error) {\n            callback(error);\n            throw error;\n        });\n    };\n    /**\n     * Retrieve the document with the given id\n     */\n    ResolvedApi.prototype.getByID = function (id, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        if (!options.lang)\n            options.lang = '*';\n        return this.queryFirst(Predicates.at('document.id', id), options, cb);\n    };\n    /**\n     * Retrieve multiple documents from an array of id\n     */\n    ResolvedApi.prototype.getByIDs = function (ids, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        if (!options.lang)\n            options.lang = '*';\n        return this.query(Predicates.in('document.id', ids), options, cb);\n    };\n    /**\n     * Retrieve the document with the given uid\n     */\n    ResolvedApi.prototype.getByUID = function (type, uid, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        if (options.lang === '*')\n            throw new Error(\"FORBIDDEN. You can't use getByUID with *, use the predicates instead.\");\n        if (!options.page)\n            options.page = 1;\n        return this.queryFirst(Predicates.at(\"my.\" + type + \".uid\", uid), options, cb);\n    };\n    /**\n     * Retrieve the singleton document with the given type\n     */\n    ResolvedApi.prototype.getSingle = function (type, maybeOptions, cb) {\n        var options = maybeOptions ? __assign({}, maybeOptions) : {};\n        return this.queryFirst(Predicates.at('document.type', type), options, cb);\n    };\n    /**\n     * Retrieve the document with the given bookmark\n     */\n    ResolvedApi.prototype.getBookmark = function (bookmark, maybeOptions, cb) {\n        var id = this.data.bookmarks[bookmark];\n        if (id) {\n            return this.getByID(id, maybeOptions, cb);\n        }\n        else {\n            return Promise.reject('Error retrieving bookmarked id');\n        }\n    };\n    ResolvedApi.prototype.getPreviewResolver = function (token, documentId) {\n        return createPreviewResolver(token, documentId, this.getByID.bind(this));\n    };\n    ResolvedApi.prototype.previewSession = function (token, linkResolver, defaultUrl, cb) {\n        var _this = this;\n        console.warn('previewSession function is deprecated in favor of getPreviewResolver function.');\n        return new Promise(function (resolve, reject) {\n            _this.httpClient.request(token, function (e, result) {\n                if (e) {\n                    cb && cb(e);\n                    reject(e);\n                }\n                else if (result) {\n                    if (!result.mainDocument) {\n                        cb && cb(null, defaultUrl);\n                        resolve(defaultUrl);\n                    }\n                    else {\n                        return _this.getByID(result.mainDocument, { ref: token }).then(function (document) {\n                            if (!document) {\n                                cb && cb(null, defaultUrl);\n                                resolve(defaultUrl);\n                            }\n                            else {\n                                var url = (linkResolver && linkResolver(document)) || document.url || defaultUrl;\n                                cb && cb(null, url);\n                                resolve(url);\n                            }\n                        }).catch(reject);\n                    }\n                }\n            });\n        });\n    };\n    return ResolvedApi;\n}());\n\n/* eslint-disable */\n/**\n* A doubly linked list-based Least Recently Used (LRU) cache. Will keep most\n* recently used items while discarding least recently used items when its limit\n* is reached.\n*\n* Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\n* Typescript-ified by Oleksandr Nikitin <https://tvori.info>\n*\n* Illustration of the design:\n*\n*       entry             entry             entry             entry\n*       ______            ______            ______            ______\n*      | head |.newer => |      |.newer => |      |.newer => | tail |\n*      |  A   |          |  B   |          |  C   |          |  D   |\n*      |______| <= older.|______| <= older.|______| <= older.|______|\n*\n*  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\n*/\nfunction MakeLRUCache(limit) {\n    return new LRUCache(limit);\n}\nfunction LRUCache(limit) {\n    // Current size of the cache. (Read-only).\n    this.size = 0;\n    // Maximum number of items this cache can hold.\n    this.limit = limit;\n    this._keymap = {};\n}\n/**\n * Put <value> into the cache associated with <key>. Returns the entry which was\n * removed to make room for the new entry. Otherwise undefined is returned\n * (i.e. if there was enough room already).\n */\nLRUCache.prototype.put = function (key, value) {\n    var entry = { key: key, value: value };\n    // Note: No protection agains replacing, and thus orphan entries. By design.\n    this._keymap[key] = entry;\n    if (this.tail) {\n        // link previous tail to the new tail (entry)\n        this.tail.newer = entry;\n        entry.older = this.tail;\n    }\n    else {\n        // we're first in -- yay\n        this.head = entry;\n    }\n    // add new entry to the end of the linked list -- it's now the freshest entry.\n    this.tail = entry;\n    if (this.size === this.limit) {\n        // we hit the limit -- remove the head\n        return this.shift();\n    }\n    else {\n        // increase the size counter\n        this.size++;\n    }\n};\n/**\n * Purge the least recently used (oldest) entry from the cache. Returns the\n * removed entry or undefined if the cache was empty.\n *\n * If you need to perform any form of finalization of purged items, this is a\n * good place to do it. Simply override/replace this function:\n *\n *   var c = new LRUCache(123);\n *   c.shift = function() {\n *     var entry = LRUCache.prototype.shift.call(this);\n *     doSomethingWith(entry);\n *     return entry;\n *   }\n */\nLRUCache.prototype.shift = function () {\n    // todo: handle special case when limit == 1\n    var entry = this.head;\n    if (entry) {\n        if (this.head.newer) {\n            this.head = this.head.newer;\n            this.head.older = undefined;\n        }\n        else {\n            this.head = undefined;\n        }\n        // Remove last strong reference to <entry> and remove links from the purged\n        // entry being returned:\n        entry.newer = entry.older = undefined;\n        // delete is slow, but we need to do this to avoid uncontrollable growth:\n        delete this._keymap[entry.key];\n    }\n    console.log('purging ', entry.key);\n    return entry;\n};\n/**\n * Get and register recent use of <key>. Returns the value associated with <key>\n * or undefined if not in cache.\n */\nLRUCache.prototype.get = function (key, returnEntry) {\n    // First, find our cache entry\n    var entry = this._keymap[key];\n    if (entry === undefined)\n        return; // Not cached. Sorry.\n    // As <key> was found in the cache, register it as being requested recently\n    if (entry === this.tail) {\n        // Already the most recently used entry, so no need to update the list\n        return returnEntry ? entry : entry.value;\n    }\n    // HEAD--------------TAIL\n    //   <.older   .newer>\n    //  <--- add direction --\n    //   A  B  C  <D>  E\n    if (entry.newer) {\n        if (entry === this.head)\n            this.head = entry.newer;\n        entry.newer.older = entry.older; // C <-- E.\n    }\n    if (entry.older)\n        entry.older.newer = entry.newer; // C. --> E\n    entry.newer = undefined; // D --x\n    entry.older = this.tail; // D. --> E\n    if (this.tail)\n        this.tail.newer = entry; // E. <-- D\n    this.tail = entry;\n    return returnEntry ? entry : entry.value;\n};\n// ----------------------------------------------------------------------------\n// Following code is optional and can be removed without breaking the core\n// functionality.\n/**\n * Check if <key> is in the cache without registering recent use. Feasible if\n * you do not want to chage the state of the cache, but only \"peek\" at it.\n * Returns the entry associated with <key> if found, or undefined if not found.\n */\nLRUCache.prototype.find = function (key) {\n    return this._keymap[key];\n};\n/**\n * Update the value of entry with <key>. Returns the old value, or undefined if\n * entry was not in the cache.\n */\nLRUCache.prototype.set = function (key, value) {\n    var oldvalue;\n    var entry = this.get(key, true);\n    if (entry) {\n        oldvalue = entry.value;\n        entry.value = value;\n    }\n    else {\n        oldvalue = this.put(key, value);\n        if (oldvalue)\n            oldvalue = oldvalue.value;\n    }\n    return oldvalue;\n};\n/**\n * Remove entry <key> from cache and return its value. Returns undefined if not\n * found.\n */\nLRUCache.prototype.remove = function (key) {\n    var entry = this._keymap[key];\n    if (!entry)\n        return;\n    delete this._keymap[entry.key]; // need to do delete unfortunately\n    if (entry.newer && entry.older) {\n        // relink the older entry with the newer entry\n        entry.older.newer = entry.newer;\n        entry.newer.older = entry.older;\n    }\n    else if (entry.newer) {\n        // remove the link to us\n        entry.newer.older = undefined;\n        // link the newer entry to head\n        this.head = entry.newer;\n    }\n    else if (entry.older) {\n        // remove the link to us\n        entry.older.newer = undefined;\n        // link the newer entry to head\n        this.tail = entry.older;\n    }\n    else { // if(entry.older === undefined && entry.newer === undefined) {\n        this.head = this.tail = undefined;\n    }\n    this.size--;\n    return entry.value;\n};\n/** Removes all entries */\nLRUCache.prototype.removeAll = function () {\n    // This should be safe, as we never expose strong refrences to the outside\n    this.head = this.tail = undefined;\n    this.size = 0;\n    this._keymap = {};\n};\n/**\n * Return an array containing all keys of entries stored in the cache object, in\n * arbitrary order.\n */\nif (typeof Object.keys === 'function') {\n    LRUCache.prototype.keys = function () { return Object.keys(this._keymap); };\n}\nelse {\n    LRUCache.prototype.keys = function () {\n        var keys = [];\n        for (var k in this._keymap)\n            keys.push(k);\n        return keys;\n    };\n}\n/**\n * Call `fun` for each entry. Starting with the newest entry if `desc` is a true\n * value, otherwise starts with the oldest (head) enrty and moves towards the\n * tail.\n *\n * `fun` is called with 3 arguments in the context `context`:\n *   `fun.call(context, Object key, Object value, LRUCache self)`\n */\nLRUCache.prototype.forEach = function (fun, context, desc) {\n    var entry;\n    if (context === true) {\n        desc = true;\n        context = undefined;\n    }\n    else if (typeof context !== 'object')\n        context = this;\n    if (desc) {\n        entry = this.tail;\n        while (entry) {\n            fun.call(context, entry.key, entry.value, this);\n            entry = entry.older;\n        }\n    }\n    else {\n        entry = this.head;\n        while (entry) {\n            fun.call(context, entry.key, entry.value, this);\n            entry = entry.newer;\n        }\n    }\n};\n/** Returns a JSON (array) representation */\n//LRUCache.prototype.toJSON = function () {\n//    var s: IEntry[] = [], entry = this.head;\n//    while (entry) {\n//        s.push({ key: entry.key.toJSON(), value: entry.value.toJSON() });\n//        entry = entry.newer;\n//    }\n//    return s;\n//};\n/** Returns a String representation */\nLRUCache.prototype.toString = function () {\n    var s = '', entry = this.head;\n    while (entry) {\n        s += String(entry.key) + ':' + entry.value;\n        entry = entry.newer;\n        if (entry)\n            s += ' < ';\n    }\n    return s;\n};\n// Export ourselves\n//if (typeof this === 'object') this.LRUCache = LRUCache;\n\nvar DefaultApiCache = /** @class */ (function () {\n    function DefaultApiCache(limit) {\n        if (limit === void 0) { limit = 1000; }\n        this.lru = MakeLRUCache(limit);\n    }\n    DefaultApiCache.prototype.isExpired = function (key) {\n        var value = this.lru.get(key, false);\n        if (value) {\n            return value.expiredIn !== 0 && value.expiredIn < Date.now();\n        }\n        else {\n            return false;\n        }\n    };\n    DefaultApiCache.prototype.get = function (key, cb) {\n        var value = this.lru.get(key, false);\n        if (value && !this.isExpired(key)) {\n            cb(null, value.data);\n        }\n        else {\n            cb && cb(null);\n        }\n    };\n    DefaultApiCache.prototype.set = function (key, value, ttl, cb) {\n        this.lru.remove(key);\n        this.lru.put(key, {\n            data: value,\n            expiredIn: ttl ? (Date.now() + (ttl * 1000)) : 0,\n        });\n        cb && cb(null);\n    };\n    DefaultApiCache.prototype.remove = function (key, cb) {\n        this.lru.remove(key);\n        cb && cb(null);\n    };\n    DefaultApiCache.prototype.clear = function (cb) {\n        this.lru.removeAll();\n        cb && cb(null);\n    };\n    return DefaultApiCache;\n}());\n\nfunction fetchRequest(url, options, callback) {\n    var fetchOptions = {\n        headers: {\n            Accept: 'application/json',\n        },\n    };\n    if (options && options.proxyAgent) {\n        fetchOptions.agent = options.proxyAgent;\n    }\n    // can't use number because of NodeJS globals included\n    var timeoutId;\n    var fetchPromise = cross_fetch__WEBPACK_IMPORTED_MODULE_0__(url, fetchOptions);\n    var promise = options.timeoutInMs ? Promise.race([\n        fetchPromise,\n        new Promise(function (_, reject) {\n            timeoutId = setTimeout(function () { return reject(new Error(url + \" response timeout\")); }, options.timeoutInMs);\n        })\n    ]) : fetchPromise;\n    promise.then(function (resp) {\n        clearTimeout(timeoutId);\n        if (~~(resp.status / 100 !== 2)) {\n            /**\n             * @description\n             * drain the resp before throwing an error to prevent memory leaks\n             * @link https://github.com/bitinn/node-fetch/issues/83\n             */\n            return resp.text().then(function () {\n                var e = new Error(\"Unexpected status code [\" + resp.status + \"] on URL \" + url);\n                e.status = resp.status;\n                throw e;\n            });\n        }\n        return resp.json().then(function (result) {\n            var cacheControl = resp.headers.get('cache-control');\n            var parsedCacheControl = cacheControl ? /max-age=(\\d+)/.exec(cacheControl) : null;\n            var ttl = parsedCacheControl ? parseInt(parsedCacheControl[1], 10) : undefined;\n            callback(null, result, resp, ttl);\n        });\n    }).catch(function (err) {\n        clearTimeout(timeoutId);\n        callback(err);\n    });\n}\nvar DefaultRequestHandler = /** @class */ (function () {\n    function DefaultRequestHandler(options) {\n        this.options = options || {};\n    }\n    DefaultRequestHandler.prototype.request = function (url, callback) {\n        fetchRequest(url, this.options, callback);\n    };\n    return DefaultRequestHandler;\n}());\n\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(requestHandler, cache, proxyAgent, timeoutInMs) {\n        this.requestHandler = requestHandler || new DefaultRequestHandler({ proxyAgent: proxyAgent, timeoutInMs: timeoutInMs });\n        this.cache = cache || new DefaultApiCache();\n    }\n    HttpClient.prototype.request = function (url, callback) {\n        this.requestHandler.request(url, function (err, result, xhr, ttl) {\n            if (err) {\n                callback && callback(err, null, xhr, ttl);\n            }\n            else if (result) {\n                callback && callback(null, result, xhr, ttl);\n            }\n        });\n    };\n    /**\n     * Fetch a URL corresponding to a query, and parse the response as a Response object\n     */\n    HttpClient.prototype.cachedRequest = function (url, maybeOptions) {\n        var _this = this;\n        var options = maybeOptions || {};\n        var run = function (cb) {\n            var cacheKey = options.cacheKey || url;\n            _this.cache.get(cacheKey, function (cacheGetError, cacheGetValue) {\n                if (cacheGetError || cacheGetValue) {\n                    cb(cacheGetError, cacheGetValue);\n                }\n                else {\n                    _this.request(url, function (fetchError, fetchValue, _, ttlReq) {\n                        if (fetchError) {\n                            cb(fetchError, null);\n                        }\n                        else {\n                            var ttl = ttlReq || options.ttl;\n                            if (ttl) {\n                                _this.cache.set(cacheKey, fetchValue, ttl, cb);\n                            }\n                            cb(null, fetchValue);\n                        }\n                    });\n                }\n            });\n        };\n        return new Promise(function (resolve, reject) {\n            run(function (err, value) {\n                if (err)\n                    reject(err);\n                if (value)\n                    resolve(value);\n            });\n        });\n    };\n    return HttpClient;\n}());\n\nfunction separator(url) {\n    return url.indexOf('?') > -1 ? '&' : '?';\n}\nvar Api = /** @class */ (function () {\n    function Api(url, options) {\n        this.options = options || {};\n        this.url = url;\n        if (this.options.accessToken) {\n            var accessTokenParam = \"access_token=\" + this.options.accessToken;\n            this.url += separator(url) + accessTokenParam;\n        }\n        if (this.options.routes) {\n            this.url += separator(url) + (\"routes=\" + encodeURIComponent(JSON.stringify(this.options.routes)));\n        }\n        this.apiDataTTL = this.options.apiDataTTL || 5;\n        this.httpClient = new HttpClient(this.options.requestHandler, this.options.apiCache, this.options.proxyAgent, this.options.timeoutInMs);\n    }\n    /**\n     * Fetches data used to construct the api client, from cache if it's\n     * present, otherwise from calling the prismic api endpoint (which is\n     * then cached).\n     */\n    Api.prototype.get = function (cb) {\n        var _this = this;\n        return this.httpClient.cachedRequest(this.url, { ttl: this.apiDataTTL }).then(function (data) {\n            var resolvedApi = new ResolvedApi(data, _this.httpClient, _this.options);\n            cb && cb(null, resolvedApi);\n            return resolvedApi;\n        }).catch(function (error) {\n            cb && cb(error);\n            throw error;\n        });\n    };\n    return Api;\n}());\n\nvar DefaultClient = /** @class */ (function () {\n    function DefaultClient(url, options) {\n        this.api = new Api(url, options);\n    }\n    DefaultClient.prototype.getApi = function () {\n        return this.api.get();\n    };\n    DefaultClient.prototype.everything = function () {\n        return this.form('everything');\n    };\n    DefaultClient.prototype.form = function (formId) {\n        return new LazySearchForm(formId, this.api);\n    };\n    DefaultClient.prototype.query = function (q, optionsOrCallback, cb) {\n        return this.getApi().then(function (api) { return api.query(q, optionsOrCallback, cb); });\n    };\n    DefaultClient.prototype.queryFirst = function (q, optionsOrCallback, cb) {\n        return this.getApi().then(function (api) { return api.queryFirst(q, optionsOrCallback, cb); });\n    };\n    DefaultClient.prototype.getByID = function (id, options, cb) {\n        return this.getApi().then(function (api) { return api.getByID(id, options, cb); });\n    };\n    DefaultClient.prototype.getByIDs = function (ids, options, cb) {\n        return this.getApi().then(function (api) { return api.getByIDs(ids, options, cb); });\n    };\n    DefaultClient.prototype.getByUID = function (type, uid, options, cb) {\n        return this.getApi().then(function (api) { return api.getByUID(type, uid, options, cb); });\n    };\n    DefaultClient.prototype.getSingle = function (type, options, cb) {\n        return this.getApi().then(function (api) { return api.getSingle(type, options, cb); });\n    };\n    DefaultClient.prototype.getBookmark = function (bookmark, options, cb) {\n        return this.getApi().then(function (api) { return api.getBookmark(bookmark, options, cb); });\n    };\n    DefaultClient.prototype.previewSession = function (token, linkResolver, defaultUrl, cb) {\n        return this.getApi().then(function (api) { return api.previewSession(token, linkResolver, defaultUrl, cb); });\n    };\n    DefaultClient.prototype.getPreviewResolver = function (token, documentId) {\n        var _this = this;\n        var getDocById = function (documentId, maybeOptions) { return _this.getApi().then(function (api) {\n            return api.getByID(documentId, maybeOptions);\n        }); };\n        return createPreviewResolver(token, documentId, getDocById);\n    };\n    DefaultClient.getApi = function (url, options) {\n        var api = new Api(url, options);\n        return api.get();\n    };\n    return DefaultClient;\n}());\n\nvar index = {\n    experimentCookie: EXPERIMENT_COOKIE,\n    previewCookie: PREVIEW_COOKIE,\n    Predicates: Predicates,\n    Experiments: Experiments,\n    Api: Api,\n    client: client,\n    getApi: getApi,\n    api: api,\n};\nfunction client(url, options) {\n    return new DefaultClient(url, options);\n}\nfunction getApi(url, options) {\n    return DefaultClient.getApi(url, options);\n}\nfunction api(url, options) {\n    return getApi(url, options);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n//# sourceMappingURL=prismic-javascript.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prismic-javascript/esm/prismic-javascript.mjs\n");

/***/ }),

/***/ "./node_modules/prismic-reactjs/dist/prismic-reactjs.js":
/*!**************************************************************!*\
  !*** ./node_modules/prismic-reactjs/dist/prismic-reactjs.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/object-assign/index.js\":\n/*!*********************************************!*\\\n  !*** ./node_modules/object-assign/index.js ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};\n\n/***/ }),\n\n/***/ \"./node_modules/prismic-helpers/dist/prismic-helpers.min.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/prismic-helpers/dist/prismic-helpers.min.js ***!\n  \\******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n!function (e, t) {\n   true ? module.exports = t() : undefined;\n}(\"undefined\" != typeof self ? self : this, function () {\n  return function (e) {\n    var t = {};\n\n    function n(r) {\n      if (t[r]) return t[r].exports;\n      var o = t[r] = {\n        i: r,\n        l: !1,\n        exports: {}\n      };\n      return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;\n    }\n\n    return n.m = e, n.c = t, n.d = function (e, t, r) {\n      n.o(e, t) || Object.defineProperty(e, t, {\n        enumerable: !0,\n        get: r\n      });\n    }, n.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, n.t = function (e, t) {\n      if (1 & t && (e = n(e)), 8 & t) return e;\n      if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n      var r = Object.create(null);\n      if (n.r(r), Object.defineProperty(r, \"default\", {\n        enumerable: !0,\n        value: e\n      }), 2 & t && \"string\" != typeof e) for (var o in e) n.d(r, o, function (t) {\n        return e[t];\n      }.bind(null, o));\n      return r;\n    }, n.n = function (e) {\n      var t = e && e.__esModule ? function () {\n        return e.default;\n      } : function () {\n        return e;\n      };\n      return n.d(t, \"a\", t), t;\n    }, n.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, n.p = \"\", n(n.s = 0);\n  }([function (e, t, n) {\n    e.exports = n(1);\n  }, function (e, t, n) {\n    var r = n(2),\n        o = n(3);\n    e.exports = {\n      Link: r,\n      Date: o\n    };\n  }, function (e, t, n) {\n    e.exports = {\n      url: function (e, t) {\n        if (e && [e.link_type, e._linkType, e.linkType].some(function (e) {\n          return e && [\"Document\", \"Link.Document\", \"Link.document\"].includes(e);\n        }) && t && \"function\" == typeof t) {\n          var n = t(e);\n          if (n) return n;\n        }\n\n        return e && e.url ? e.url : \"\";\n      }\n    };\n  }, function (e, t) {\n    e.exports = function (e) {\n      if (!e) return null;\n      var t = 24 == e.length ? \"\".concat(e.substring(0, 22), \":\").concat(e.substring(22, 24)) : e;\n      return new Date(t);\n    };\n  }]);\n});\n\n/***/ }),\n\n/***/ \"./node_modules/prismic-richtext/dist/prismic-richtext.min.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/prismic-richtext/dist/prismic-richtext.min.js ***!\n  \\********************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n!function (e, t) {\n   true ? module.exports = t() : undefined;\n}(\"undefined\" != typeof self ? self : this, function () {\n  return function (e) {\n    var t = {};\n\n    function n(r) {\n      if (t[r]) return t[r].exports;\n      var o = t[r] = {\n        i: r,\n        l: !1,\n        exports: {}\n      };\n      return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;\n    }\n\n    return n.m = e, n.c = t, n.d = function (e, t, r) {\n      n.o(e, t) || Object.defineProperty(e, t, {\n        enumerable: !0,\n        get: r\n      });\n    }, n.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, n.t = function (e, t) {\n      if (1 & t && (e = n(e)), 8 & t) return e;\n      if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n      var r = Object.create(null);\n      if (n.r(r), Object.defineProperty(r, \"default\", {\n        enumerable: !0,\n        value: e\n      }), 2 & t && \"string\" != typeof e) for (var o in e) n.d(r, o, function (t) {\n        return e[t];\n      }.bind(null, o));\n      return r;\n    }, n.n = function (e) {\n      var t = e && e.__esModule ? function () {\n        return e.default;\n      } : function () {\n        return e;\n      };\n      return n.d(t, \"a\", t), t;\n    }, n.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, n.p = \"\", n(n.s = 9);\n  }([function (e, t, n) {\n    var r = n(3);\n\n    e.exports = function (e) {\n      return function t(n) {\n        return 0 === arguments.length || r(n) ? t : e.apply(this, arguments);\n      };\n    };\n  }, function (e, t, n) {\n    var r = n(0),\n        o = n(3);\n\n    e.exports = function (e) {\n      return function t(n, i) {\n        switch (arguments.length) {\n          case 0:\n            return t;\n\n          case 1:\n            return o(n) ? t : r(function (t) {\n              return e(n, t);\n            });\n\n          default:\n            return o(n) && o(i) ? t : o(n) ? r(function (t) {\n              return e(t, i);\n            }) : o(i) ? r(function (t) {\n              return e(n, t);\n            }) : e(n, i);\n        }\n      };\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var r;\n\n    function o(e, t, n) {\n      return t in e ? Object.defineProperty(e, t, {\n        value: n,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }) : e[t] = n, e;\n    }\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.PRIORITIES = t.NODE_TYPES = void 0;\n    var i = {\n      heading1: \"heading1\",\n      heading2: \"heading2\",\n      heading3: \"heading3\",\n      heading4: \"heading4\",\n      heading5: \"heading5\",\n      heading6: \"heading6\",\n      paragraph: \"paragraph\",\n      preformatted: \"preformatted\",\n      strong: \"strong\",\n      em: \"em\",\n      listItem: \"list-item\",\n      oListItem: \"o-list-item\",\n      list: \"group-list-item\",\n      oList: \"group-o-list-item\",\n      image: \"image\",\n      embed: \"embed\",\n      hyperlink: \"hyperlink\",\n      label: \"label\",\n      span: \"span\"\n    };\n    t.NODE_TYPES = i;\n    var u = (o(r = {}, i.heading1, 4), o(r, i.heading2, 4), o(r, i.heading3, 4), o(r, i.heading4, 4), o(r, i.heading5, 4), o(r, i.heading6, 4), o(r, i.paragraph, 3), o(r, i.preformatted, 5), o(r, i.strong, 6), o(r, i.em, 6), o(r, i.oList, 1), o(r, i.list, 1), o(r, i.listItem, 1), o(r, i.oListItem, 1), o(r, i.image, 1), o(r, i.embed, 1), o(r, i.hyperlink, 3), o(r, i.label, 4), o(r, i.span, 7), r);\n    t.PRIORITIES = u;\n  }, function (e, t) {\n    e.exports = function (e) {\n      return null != e && \"object\" == typeof e && !0 === e[\"@@functional/placeholder\"];\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.default = void 0;\n    var r = d(n(12)),\n        o = d(n(15)),\n        i = d(n(16)),\n        u = d(n(17)),\n        c = d(n(21)),\n        a = d(n(7)),\n        l = n(23),\n        f = n(2),\n        s = n(8);\n\n    function d(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    function p(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    function h(e) {\n      return function (e) {\n        if (Array.isArray(e)) return e;\n      }(e) || function (e) {\n        if (Symbol.iterator in Object(e) || \"[object Arguments]\" === Object.prototype.toString.call(e)) return Array.from(e);\n      }(e) || function () {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }();\n    }\n\n    function y(e, t) {\n      var n = t.others.reduce(function (n, r) {\n        var o = n.inner,\n            i = n.outer,\n            u = function (e, t, n) {\n          return n.start < t.start ? {\n            inner: s.SpanNode.slice(n, t.start, n.end, e),\n            outer: s.SpanNode.slice(n, n.start, t.start, e)\n          } : n.end > t.end ? {\n            inner: s.SpanNode.slice(n, n.start, t.end, e),\n            outer: s.SpanNode.slice(n, t.end, n.end, e)\n          } : {\n            inner: n\n          };\n        }(e, t.elected, r);\n\n        return {\n          inner: o.concat(u.inner),\n          outer: u.outer ? i.concat(u.outer) : i\n        };\n      }, {\n        inner: [],\n        outer: []\n      }),\n          r = n.inner,\n          o = n.outer;\n      return [t.elected.setChildren(x(e, r, t.elected.boundaries()))].concat(b(e, o));\n    }\n\n    function v(e) {\n      return function (e, t) {\n        return t.reduce(function (t, n) {\n          var r = (0, c.default)(t);\n\n          if (r) {\n            if (r.some(function (e) {\n              return e.isParentOf(n);\n            })) return (0, u.default)(t).concat([r.concat(n)]);\n            var o = (0, c.default)(r);\n            return o && e(o, n) ? (0, u.default)(t).concat([r.concat(n)]) : t.concat([[n]]);\n          }\n\n          return [[n]];\n        }, []);\n      }(function (e, t) {\n        return e.end >= t.start;\n      }, (0, i.default)([function (e, t) {\n        return e.start - t.start;\n      }, function (e, t) {\n        return e.end - t.end;\n      }], e));\n    }\n\n    function m(e) {\n      if (0 === e.length) throw new Error(\"Unable to elect node on empty list\");\n      var t = h(e.sort(function (e, t) {\n        if (e.isParentOf(t)) return -1;\n        if (t.isParentOf(e)) return 1;\n        var n = f.PRIORITIES[e.type] - f.PRIORITIES[t.type];\n        return 0 === n ? e.text.length - t.text.length : n;\n      }));\n      return {\n        elected: t[0],\n        others: t.slice(1)\n      };\n    }\n\n    function x(e, t, n) {\n      if (t.length > 0) return function (e, t, n) {\n        return t.reduce(function (r, o, i) {\n          var u = [],\n              c = 0 === i && o.start > n.lower,\n              a = i === t.length - 1 && n.upper > o.end;\n\n          if (c) {\n            var l = new s.TextNode(n.lower, o.start, e.slice(n.lower, o.start));\n            u = u.concat(l);\n          } else {\n            var f = t[i - 1];\n\n            if (f && o.start > f.end) {\n              var d = e.slice(f.end, o.start),\n                  p = new s.TextNode(f.end, o.start, d);\n              u = u.concat(p);\n            }\n          }\n\n          if (u = u.concat(o), a) {\n            var h = new s.TextNode(o.end, n.upper, e.slice(o.end, n.upper));\n            u = u.concat(h);\n          }\n\n          return r.concat(u);\n        }, []);\n      }(e, b(e, t), n);\n      var r = e.slice(n.lower, n.upper);\n      return [new s.TextNode(n.lower, n.upper, r)];\n    }\n\n    function b(e, t) {\n      var n = v((0, o.default)(function (e) {\n        return e.start;\n      }, t)).map(m),\n          i = (0, r.default)(n.map(function (t) {\n        return y(e, t);\n      }));\n      return (0, o.default)(function (e) {\n        return e.start;\n      }, i);\n    }\n\n    var g = function () {\n      function e() {\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e);\n      }\n\n      var t, n, r;\n      return t = e, r = [{\n        key: \"fromRichText\",\n        value: function (e) {\n          return {\n            key: (0, a.default)(),\n            children: e.reduce(function (e, t, n) {\n              if (l.RichTextBlock.isEmbedBlock(t.type) || l.RichTextBlock.isImageBlock(t.type)) return e.concat(new s.BlockNode(t.type, t));\n\n              var r = function (e) {\n                var t = e.spans.map(function (t) {\n                  var n = e.text.slice(t.start, t.end);\n                  return new s.SpanNode(t.start, t.end, t.type, n, [], t);\n                }),\n                    n = {\n                  lower: 0,\n                  upper: e.text.length\n                };\n                return x(e.text, t, n);\n              }(t),\n                  o = e[e.length - 1];\n\n              if (l.RichTextBlock.isListItem(t.type) && o && o instanceof s.ListBlockNode) {\n                var i = new s.ListItemBlockNode(t, r),\n                    c = o.addChild(i);\n                return (0, u.default)(e).concat(c);\n              }\n\n              if (l.RichTextBlock.isOrderedListItem(t.type) && o && o instanceof s.OrderedListBlockNode) {\n                var a = new s.OrderedListItemBlockNode(t, r),\n                    f = o.addChild(a);\n                return (0, u.default)(e).concat(f);\n              }\n\n              if (l.RichTextBlock.isListItem(t.type)) {\n                var d = new s.ListItemBlockNode(t, r),\n                    p = new s.ListBlockNode(l.RichTextBlock.emptyList(), [d]);\n                return e.concat(p);\n              }\n\n              if (l.RichTextBlock.isOrderedListItem(t.type)) {\n                var h = new s.OrderedListItemBlockNode(t, r),\n                    y = new s.OrderedListBlockNode(l.RichTextBlock.emptyOrderedList(), [h]);\n                return e.concat(y);\n              }\n\n              return e.concat(new s.BlockNode(t.type, t, r));\n            }, [])\n          };\n        }\n      }], (n = null) && p(t.prototype, n), r && p(t, r), e;\n    }();\n\n    t.default = g;\n  }, function (e, t) {\n    e.exports = Array.isArray || function (e) {\n      return null != e && e.length >= 0 && \"[object Array]\" === Object.prototype.toString.call(e);\n    };\n  }, function (e, t) {\n    e.exports = function (e) {\n      return \"[object String]\" === Object.prototype.toString.call(e);\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.default = function () {\n      var e = new Date().getTime();\n      return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (t) {\n        var n = (e + 16 * Math.random()) % 16 | 0;\n        return e = Math.floor(e / 16), (\"x\" == t ? n : 3 & n | 8).toString(16);\n      });\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.ListBlockNode = t.OrderedListBlockNode = t.OrderedListItemBlockNode = t.ListItemBlockNode = t.BlockNode = t.TextNode = t.SpanNode = t.Node = void 0;\n    var r,\n        o = (r = n(7)) && r.__esModule ? r : {\n      default: r\n    },\n        i = n(2);\n\n    function u(e) {\n      return (u = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n        return typeof e;\n      } : function (e) {\n        return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n      })(e);\n    }\n\n    function c(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    function a(e, t, n) {\n      return t && c(e.prototype, t), n && c(e, n), e;\n    }\n\n    function l(e, t) {\n      return !t || \"object\" !== u(t) && \"function\" != typeof t ? function (e) {\n        if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return e;\n      }(e) : t;\n    }\n\n    function f(e) {\n      return (f = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n        return e.__proto__ || Object.getPrototypeOf(e);\n      })(e);\n    }\n\n    function s(e, t) {\n      if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");\n      e.prototype = Object.create(t && t.prototype, {\n        constructor: {\n          value: e,\n          writable: !0,\n          configurable: !0\n        }\n      }), t && d(e, t);\n    }\n\n    function d(e, t) {\n      return (d = Object.setPrototypeOf || function (e, t) {\n        return e.__proto__ = t, e;\n      })(e, t);\n    }\n\n    function p(e, t) {\n      if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n    }\n\n    var h = function e(t, n, r) {\n      p(this, e), this.key = (0, o.default)(), this.type = t, this.element = n, this.children = r;\n    };\n\n    t.Node = h;\n\n    var y = function (e) {\n      function t(e, n, r, o, i, u) {\n        var c;\n        return p(this, t), (c = l(this, f(t).call(this, r, u, i))).start = e, c.end = n, c.text = o, c.children = i, c;\n      }\n\n      return s(t, h), a(t, [{\n        key: \"boundaries\",\n        value: function () {\n          return {\n            lower: this.start,\n            upper: this.end\n          };\n        }\n      }, {\n        key: \"isParentOf\",\n        value: function (e) {\n          return this.start <= e.start && this.end >= e.end;\n        }\n      }, {\n        key: \"setChildren\",\n        value: function (e) {\n          return new t(this.start, this.end, this.type, this.text, e, this.element);\n        }\n      }], [{\n        key: \"slice\",\n        value: function (e, n, r, o) {\n          return new t(n, r, e.type, o.slice(n, r), e.children, e.element);\n        }\n      }]), t;\n    }();\n\n    t.SpanNode = y;\n\n    var v = function (e) {\n      function t(e, n, r) {\n        p(this, t);\n        var o = {\n          type: i.NODE_TYPES.span,\n          start: e,\n          end: n,\n          text: r\n        };\n        return l(this, f(t).call(this, e, n, i.NODE_TYPES.span, r, [], o));\n      }\n\n      return s(t, y), t;\n    }();\n\n    t.TextNode = v;\n\n    var m = function (e) {\n      function t(e, n) {\n        var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];\n        return p(this, t), l(this, f(t).call(this, e, n, r));\n      }\n\n      return s(t, h), t;\n    }();\n\n    t.BlockNode = m;\n\n    var x = function (e) {\n      function t(e, n) {\n        return p(this, t), l(this, f(t).call(this, i.NODE_TYPES.listItem, e, n));\n      }\n\n      return s(t, m), t;\n    }();\n\n    t.ListItemBlockNode = x;\n\n    var b = function (e) {\n      function t(e, n) {\n        return p(this, t), l(this, f(t).call(this, i.NODE_TYPES.oListItem, e, n));\n      }\n\n      return s(t, m), t;\n    }();\n\n    t.OrderedListItemBlockNode = b;\n\n    var g = function (e) {\n      function t(e, n) {\n        return p(this, t), l(this, f(t).call(this, i.NODE_TYPES.oList, e, n));\n      }\n\n      return s(t, m), a(t, [{\n        key: \"addChild\",\n        value: function (e) {\n          var n = this.children.concat(e);\n          return new t(this.element, n);\n        }\n      }]), t;\n    }();\n\n    t.OrderedListBlockNode = g;\n\n    var O = function (e) {\n      function t(e, n) {\n        return p(this, t), l(this, f(t).call(this, i.NODE_TYPES.list, e, n));\n      }\n\n      return s(t, m), a(t, [{\n        key: \"addChild\",\n        value: function (e) {\n          var n = this.children.concat(e);\n          return new t(this.element, n);\n        }\n      }]), t;\n    }();\n\n    t.ListBlockNode = O;\n  }, function (e, t, n) {\n    e.exports = n(10);\n  }, function (e, t, n) {\n    \"use strict\";\n\n    var r = c(n(11)),\n        o = c(n(4)),\n        i = c(n(24)),\n        u = n(2);\n\n    function c(e) {\n      return e && e.__esModule ? e : {\n        default: e\n      };\n    }\n\n    e.exports = {\n      asText: r.default,\n      asTree: o.default.fromRichText,\n      serialize: i.default,\n      Elements: u.NODE_TYPES\n    };\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.default = void 0;\n\n    var r = function (e, t) {\n      var n = \"string\" == typeof t ? t : \" \";\n      return e.map(function (e) {\n        return e.text;\n      }).join(n);\n    };\n\n    t.default = r;\n  }, function (e, t, n) {\n    var r = n(0)(n(13)(!0));\n    e.exports = r;\n  }, function (e, t, n) {\n    var r = n(14);\n\n    e.exports = function (e) {\n      return function t(n) {\n        for (var o, i, u, c = [], a = 0, l = n.length; a < l;) {\n          if (r(n[a])) for (u = 0, i = (o = e ? t(n[a]) : n[a]).length; u < i;) c[c.length] = o[u], u += 1;else c[c.length] = n[a];\n          a += 1;\n        }\n\n        return c;\n      };\n    };\n  }, function (e, t, n) {\n    var r = n(0),\n        o = n(5),\n        i = n(6),\n        u = r(function (e) {\n      return !!o(e) || !!e && \"object\" == typeof e && !i(e) && (1 === e.nodeType ? !!e.length : 0 === e.length || e.length > 0 && e.hasOwnProperty(0) && e.hasOwnProperty(e.length - 1));\n    });\n    e.exports = u;\n  }, function (e, t, n) {\n    var r = n(1)(function (e, t) {\n      return Array.prototype.slice.call(t, 0).sort(function (t, n) {\n        var r = e(t),\n            o = e(n);\n        return r < o ? -1 : r > o ? 1 : 0;\n      });\n    });\n    e.exports = r;\n  }, function (e, t, n) {\n    var r = n(1)(function (e, t) {\n      return Array.prototype.slice.call(t, 0).sort(function (t, n) {\n        for (var r = 0, o = 0; 0 === r && o < e.length;) r = e[o](t, n), o += 1;\n\n        return r;\n      });\n    });\n    e.exports = r;\n  }, function (e, t, n) {\n    var r = n(18)(0, -1);\n    e.exports = r;\n  }, function (e, t, n) {\n    var r = n(19),\n        o = n(20)(r(\"slice\", function (e, t, n) {\n      return Array.prototype.slice.call(n, e, t);\n    }));\n    e.exports = o;\n  }, function (e, t, n) {\n    var r = n(5);\n\n    e.exports = function (e, t) {\n      return function () {\n        var n = arguments.length;\n        if (0 === n) return t();\n        var o = arguments[n - 1];\n        return r(o) || \"function\" != typeof o[e] ? t.apply(this, arguments) : o[e].apply(o, Array.prototype.slice.call(arguments, 0, n - 1));\n      };\n    };\n  }, function (e, t, n) {\n    var r = n(0),\n        o = n(1),\n        i = n(3);\n\n    e.exports = function (e) {\n      return function t(n, u, c) {\n        switch (arguments.length) {\n          case 0:\n            return t;\n\n          case 1:\n            return i(n) ? t : o(function (t, r) {\n              return e(n, t, r);\n            });\n\n          case 2:\n            return i(n) && i(u) ? t : i(n) ? o(function (t, n) {\n              return e(t, u, n);\n            }) : i(u) ? o(function (t, r) {\n              return e(n, t, r);\n            }) : r(function (t) {\n              return e(n, u, t);\n            });\n\n          default:\n            return i(n) && i(u) && i(c) ? t : i(n) && i(u) ? o(function (t, n) {\n              return e(t, n, c);\n            }) : i(n) && i(c) ? o(function (t, n) {\n              return e(t, u, n);\n            }) : i(u) && i(c) ? o(function (t, r) {\n              return e(n, t, r);\n            }) : i(n) ? r(function (t) {\n              return e(t, u, c);\n            }) : i(u) ? r(function (t) {\n              return e(n, t, c);\n            }) : i(c) ? r(function (t) {\n              return e(n, u, t);\n            }) : e(n, u, c);\n        }\n      };\n    };\n  }, function (e, t, n) {\n    var r = n(22)(-1);\n    e.exports = r;\n  }, function (e, t, n) {\n    var r = n(1),\n        o = n(6),\n        i = r(function (e, t) {\n      var n = e < 0 ? t.length + e : e;\n      return o(t) ? t.charAt(n) : t[n];\n    });\n    e.exports = i;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.RichTextBlock = void 0;\n    var r = n(2);\n\n    function o(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var r = t[n];\n        r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n      }\n    }\n\n    var i = function () {\n      function e(t, n, r) {\n        !function (e, t) {\n          if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n        }(this, e), this.type = t, this.text = n, this.spans = r;\n      }\n\n      var t, n, i;\n      return t = e, i = [{\n        key: \"isEmbedBlock\",\n        value: function (e) {\n          return e === r.NODE_TYPES.embed;\n        }\n      }, {\n        key: \"isImageBlock\",\n        value: function (e) {\n          return e === r.NODE_TYPES.image;\n        }\n      }, {\n        key: \"isList\",\n        value: function (e) {\n          return e === r.NODE_TYPES.list;\n        }\n      }, {\n        key: \"isOrderedList\",\n        value: function (e) {\n          return e === r.NODE_TYPES.oList;\n        }\n      }, {\n        key: \"isListItem\",\n        value: function (e) {\n          return e === r.NODE_TYPES.listItem;\n        }\n      }, {\n        key: \"isOrderedListItem\",\n        value: function (e) {\n          return e === r.NODE_TYPES.oListItem;\n        }\n      }, {\n        key: \"emptyList\",\n        value: function () {\n          return {\n            type: r.NODE_TYPES.list,\n            spans: [],\n            text: \"\"\n          };\n        }\n      }, {\n        key: \"emptyOrderedList\",\n        value: function () {\n          return {\n            type: r.NODE_TYPES.oList,\n            spans: [],\n            text: \"\"\n          };\n        }\n      }], (n = null) && o(t.prototype, n), i && o(t, i), e;\n    }();\n\n    t.RichTextBlock = i;\n  }, function (e, t, n) {\n    \"use strict\";\n\n    Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    }), t.default = void 0;\n    var r,\n        o = (r = n(4)) && r.__esModule ? r : {\n      default: r\n    },\n        i = n(8);\n\n    var u = function (e, t, n) {\n      return o.default.fromRichText(e).children.map(function (e, r) {\n        return function (e, t, n, r) {\n          return function e(n, o) {\n            var u = n instanceof i.SpanNode ? n.text : null,\n                c = n.children.reduce(function (t, n, r) {\n              return t.concat([e(n, r)]);\n            }, []),\n                a = r && r(n.type, n.element, u, c, o);\n            return a || t(n.type, n.element, u, c, o);\n          }(e, n);\n        }(e, t, r, n);\n      });\n    };\n\n    t.default = u;\n  }]);\n});\n\n/***/ }),\n\n/***/ \"./node_modules/prop-types/checkPropTypes.js\":\n/*!***************************************************!*\\\n  !*** ./node_modules/prop-types/checkPropTypes.js ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar printWarning = function () {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function (text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\n\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error && !(error instanceof Error)) {\n          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');\n        }\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          var stack = getStack ? getStack() : '';\n          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n        }\n      }\n    }\n  }\n}\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\n\n\ncheckPropTypes.resetWarningCache = function () {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n};\n\nmodule.exports = checkPropTypes;\n\n/***/ }),\n\n/***/ \"./node_modules/prop-types/factoryWithTypeCheckers.js\":\n/*!************************************************************!*\\\n  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n\nvar assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n\nvar ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n\nvar checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\n\nvar printWarning = function () {};\n\nif (true) {\n  printWarning = function (text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function (isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n\n  var ANONYMOUS = '<<anonymous>>'; // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker\n  };\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n\n  /*eslint-disable no-self-compare*/\n\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n\n\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  } // Make `instanceof Error` still work for returned errors.\n\n\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (true) {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (  true && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n\n          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n          manualPropTypeWarningCount < 3) {\n            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n\n      var propValue = props[propName];\n\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (true) {\n        if (arguments.length > 1) {\n          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n\n        if (type === 'symbol') {\n          return String(value);\n        }\n\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n\n      if (typeof checker !== 'function') {\n        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n\n        if (!checker) {\n          continue;\n        }\n\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      } // We need to check all keys in case some are required but missing from\n      // props.\n\n\n      var allKeys = assign({}, props[propName], shapeTypes);\n\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n\n        if (!checker) {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n        }\n\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n\n      case 'boolean':\n        return !propValue;\n\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    } // falsy value can't be a Symbol\n\n\n    if (!propValue) {\n      return false;\n    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  } // Equivalent of `typeof` but with special handling for array and regexp.\n\n\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n\n    return propType;\n  } // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n\n\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n\n    var propType = getPropType(propValue);\n\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n\n    return propType;\n  } // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n\n\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n\n      default:\n        return type;\n    }\n  } // Returns class name of the object, if any.\n\n\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};\n\n/***/ }),\n\n/***/ \"./node_modules/prop-types/index.js\":\n/*!******************************************!*\\\n  !*** ./node_modules/prop-types/index.js ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nif (true) {\n  var ReactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\"); // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n\n\n  var throwOnDirectAccess = true;\n  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ \"./node_modules/prop-types/factoryWithTypeCheckers.js\")(ReactIs.isElement, throwOnDirectAccess);\n} else {}\n\n/***/ }),\n\n/***/ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/*!*************************************************************!*\\\n  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nmodule.exports = ReactPropTypesSecret;\n\n/***/ }),\n\n/***/ \"./node_modules/react-is/cjs/react-is.development.js\":\n/*!***********************************************************!*\\\n  !*** ./node_modules/react-is/cjs/react-is.development.js ***!\n  \\***********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/** @license React v16.9.0\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    }); // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n    // nor polyfill, then a plain number is used for performance.\n\n    var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n    // (unstable) APIs that have been removed. Can we remove the symbols?\n\n    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\n    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\n    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\n    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\n\n    function isValidElementType(type) {\n      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE);\n    }\n    /**\n     * Forked from fbjs/warning:\n     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n     *\n     * Only change is we use console.warn instead of console.error,\n     * and do nothing when 'console' is not supported.\n     * This really simplifies the code.\n     * ---\n     * Similar to invariant but only logs a warning if the condition is not met.\n     * This can be used to log issues in development environments in critical\n     * paths. Removing the logging code for production environments will keep the\n     * same logic and follow the same code paths.\n     */\n\n\n    var lowPriorityWarning = function () {};\n\n    {\n      var printWarning = function (format) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var argIndex = 0;\n        var message = 'Warning: ' + format.replace(/%s/g, function () {\n          return args[argIndex++];\n        });\n\n        if (typeof console !== 'undefined') {\n          console.warn(message);\n        }\n\n        try {\n          // --- Welcome to debugging React ---\n          // This error was thrown as a convenience so that you can use this stack\n          // to find the callsite that caused this warning to fire.\n          throw new Error(message);\n        } catch (x) {}\n      };\n\n      lowPriorityWarning = function (condition, format) {\n        if (format === undefined) {\n          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n        }\n\n        if (!condition) {\n          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            args[_key2 - 2] = arguments[_key2];\n          }\n\n          printWarning.apply(undefined, [format].concat(args));\n        }\n      };\n    }\n    var lowPriorityWarning$1 = lowPriorityWarning;\n\n    function typeOf(object) {\n      if (typeof object === 'object' && object !== null) {\n        var $$typeof = object.$$typeof;\n\n        switch ($$typeof) {\n          case REACT_ELEMENT_TYPE:\n            var type = object.type;\n\n            switch (type) {\n              case REACT_ASYNC_MODE_TYPE:\n              case REACT_CONCURRENT_MODE_TYPE:\n              case REACT_FRAGMENT_TYPE:\n              case REACT_PROFILER_TYPE:\n              case REACT_STRICT_MODE_TYPE:\n              case REACT_SUSPENSE_TYPE:\n                return type;\n\n              default:\n                var $$typeofType = type && type.$$typeof;\n\n                switch ($$typeofType) {\n                  case REACT_CONTEXT_TYPE:\n                  case REACT_FORWARD_REF_TYPE:\n                  case REACT_PROVIDER_TYPE:\n                    return $$typeofType;\n\n                  default:\n                    return $$typeof;\n                }\n\n            }\n\n          case REACT_LAZY_TYPE:\n          case REACT_MEMO_TYPE:\n          case REACT_PORTAL_TYPE:\n            return $$typeof;\n        }\n      }\n\n      return undefined;\n    } // AsyncMode is deprecated along with isAsyncMode\n\n\n    var AsyncMode = REACT_ASYNC_MODE_TYPE;\n    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n    var ContextConsumer = REACT_CONTEXT_TYPE;\n    var ContextProvider = REACT_PROVIDER_TYPE;\n    var Element = REACT_ELEMENT_TYPE;\n    var ForwardRef = REACT_FORWARD_REF_TYPE;\n    var Fragment = REACT_FRAGMENT_TYPE;\n    var Lazy = REACT_LAZY_TYPE;\n    var Memo = REACT_MEMO_TYPE;\n    var Portal = REACT_PORTAL_TYPE;\n    var Profiler = REACT_PROFILER_TYPE;\n    var StrictMode = REACT_STRICT_MODE_TYPE;\n    var Suspense = REACT_SUSPENSE_TYPE;\n    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\n    function isAsyncMode(object) {\n      {\n        if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n          hasWarnedAboutDeprecatedIsAsyncMode = true;\n          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n        }\n      }\n      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n    }\n\n    function isConcurrentMode(object) {\n      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n    }\n\n    function isContextConsumer(object) {\n      return typeOf(object) === REACT_CONTEXT_TYPE;\n    }\n\n    function isContextProvider(object) {\n      return typeOf(object) === REACT_PROVIDER_TYPE;\n    }\n\n    function isElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }\n\n    function isForwardRef(object) {\n      return typeOf(object) === REACT_FORWARD_REF_TYPE;\n    }\n\n    function isFragment(object) {\n      return typeOf(object) === REACT_FRAGMENT_TYPE;\n    }\n\n    function isLazy(object) {\n      return typeOf(object) === REACT_LAZY_TYPE;\n    }\n\n    function isMemo(object) {\n      return typeOf(object) === REACT_MEMO_TYPE;\n    }\n\n    function isPortal(object) {\n      return typeOf(object) === REACT_PORTAL_TYPE;\n    }\n\n    function isProfiler(object) {\n      return typeOf(object) === REACT_PROFILER_TYPE;\n    }\n\n    function isStrictMode(object) {\n      return typeOf(object) === REACT_STRICT_MODE_TYPE;\n    }\n\n    function isSuspense(object) {\n      return typeOf(object) === REACT_SUSPENSE_TYPE;\n    }\n\n    exports.typeOf = typeOf;\n    exports.AsyncMode = AsyncMode;\n    exports.ConcurrentMode = ConcurrentMode;\n    exports.ContextConsumer = ContextConsumer;\n    exports.ContextProvider = ContextProvider;\n    exports.Element = Element;\n    exports.ForwardRef = ForwardRef;\n    exports.Fragment = Fragment;\n    exports.Lazy = Lazy;\n    exports.Memo = Memo;\n    exports.Portal = Portal;\n    exports.Profiler = Profiler;\n    exports.StrictMode = StrictMode;\n    exports.Suspense = Suspense;\n    exports.isValidElementType = isValidElementType;\n    exports.isAsyncMode = isAsyncMode;\n    exports.isConcurrentMode = isConcurrentMode;\n    exports.isContextConsumer = isContextConsumer;\n    exports.isContextProvider = isContextProvider;\n    exports.isElement = isElement;\n    exports.isForwardRef = isForwardRef;\n    exports.isFragment = isFragment;\n    exports.isLazy = isLazy;\n    exports.isMemo = isMemo;\n    exports.isPortal = isPortal;\n    exports.isProfiler = isProfiler;\n    exports.isStrictMode = isStrictMode;\n    exports.isSuspense = isSuspense;\n  })();\n}\n\n/***/ }),\n\n/***/ \"./node_modules/react-is/index.js\":\n/*!****************************************!*\\\n  !*** ./node_modules/react-is/index.js ***!\n  \\****************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n}\n\n/***/ }),\n\n/***/ \"./src/Component.js\":\n/*!**************************!*\\\n  !*** ./src/Component.js ***!\n  \\**************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prismic_richtext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prismic-richtext */ \"./node_modules/prismic-richtext/dist/prismic-richtext.min.js\");\n/* harmony import */ var prismic_richtext__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prismic_richtext__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _richtext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./richtext */ \"./src/richtext.js\");\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar createHtmlSerializer = function createHtmlSerializer() {\n  var bucket = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serializers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var processors = serializers.reduce(function (acc, _ref) {\n    var type = _ref.type,\n        fn = _ref.fn;\n    return Object.assign({}, acc, _defineProperty({}, type, fn));\n  }, {});\n  return function (type) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return processors[type] ? processors[type].apply(processors, [type].concat(args)) : null;\n  };\n};\n\nvar RichText = function RichText(_ref2) {\n  var Component = _ref2.Component,\n      elements = _ref2.elements,\n      htmlSerializer = _ref2.htmlSerializer,\n      linkResolver = _ref2.linkResolver,\n      render = _ref2.render,\n      renderAsText = _ref2.renderAsText,\n      serializeHyperlink = _ref2.serializeHyperlink,\n      rest = _objectWithoutProperties(_ref2, [\"Component\", \"elements\", \"htmlSerializer\", \"linkResolver\", \"render\", \"renderAsText\", \"serializeHyperlink\"]);\n\n  var maybeSerializer = htmlSerializer || serializeHyperlink && createHtmlSerializer({}, [{\n    type: prismic_richtext__WEBPACK_IMPORTED_MODULE_2__[\"Elements\"].hyperlink,\n    fn: serializeHyperlink\n  }]);\n  return render ? Object(_richtext__WEBPACK_IMPORTED_MODULE_3__[\"renderRichText\"])(render, linkResolver, maybeSerializer, Component, elements, rest) : null;\n};\n\nRichText.propTypes = {\n  Component: prop_types__WEBPACK_IMPORTED_MODULE_1__[\"elementType\"],\n  linkResolver: prop_types__WEBPACK_IMPORTED_MODULE_1__[\"func\"],\n  htmlSerializer: prop_types__WEBPACK_IMPORTED_MODULE_1__[\"func\"],\n  elements: prop_types__WEBPACK_IMPORTED_MODULE_1__[\"object\"],\n  serializeHyperlink: function serializeHyperlink(props, _, componentName) {\n    if (props.serializeHyperlink && props.htmlSerializer) {\n      return new Error(\"You cannot specify both 'htmlSerializer' and 'serializeHyperlink'. The latter will be ignored by '\".concat(componentName, \"'.\"));\n    }\n  },\n  render: function render(props, _, componentName) {\n    if (!props.render) {\n      return new Error(\"Prop 'render' was not specified in '\".concat(componentName, \"'.\"));\n    }\n  }\n};\nRichText.asText = _richtext__WEBPACK_IMPORTED_MODULE_3__[\"asText\"];\nRichText.render = _richtext__WEBPACK_IMPORTED_MODULE_3__[\"renderRichText\"];\nRichText.displayName = 'RichText';\n/* harmony default export */ __webpack_exports__[\"default\"] = (RichText);\n\n/***/ }),\n\n/***/ \"./src/embeds.js\":\n/*!***********************!*\\\n  !*** ./src/embeds.js ***!\n  \\***********************/\n/*! exports provided: createScript, embeds */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createScript\", function() { return createScript; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"embeds\", function() { return embeds; });\nfunction createScript(_ref) {\n  var property = _ref.property,\n      src = _ref.src,\n      id = _ref.id;\n\n  if (!window) {\n    return;\n  }\n\n  (function (src, id) {\n    var js,\n        fjs = document.getElementsByTagName('script')[0],\n        t = window[property] || {};\n\n    if (document.getElementById(id)) {\n      return t;\n    }\n\n    js = document.createElement('script');\n    js.id = id;\n    js.src = src;\n    fjs.parentNode.insertBefore(js, fjs);\n    t._e = [];\n\n    t.ready = function (f) {\n      t._e.push(f);\n    };\n\n    return t;\n  })(src, id);\n}\nvar embeds = {\n  Twitter: {\n    property: 'twttr',\n    src: 'https://platform.twitter.com/widgets.js',\n    id: 'twitter-wjs',\n    load: function load() {\n      if (window && window.twttr) {\n        window.twttr.widgets.load();\n      }\n    }\n  },\n  Facebook: {\n    property: 'FB',\n    src: 'https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v3.3',\n    id: 'fb-wjs',\n    load: function load(ref) {\n      if (window && window.FB) {\n        window.FB.XFBML.parse(ref);\n      }\n    }\n  },\n  Instagram: {\n    property: 'instgrm',\n    src: 'https://www.instagram.com/embed.js',\n    id: 'insta-wjs',\n    load: function load() {\n      if (window && window.instgrm) {\n        window.instgrm.Embeds.process();\n      }\n    }\n  }\n};\n\n/***/ }),\n\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar PrismicHelpers = __webpack_require__(/*! prismic-helpers */ \"./node_modules/prismic-helpers/dist/prismic-helpers.min.js\");\n\nvar PrismicRichText = __webpack_require__(/*! prismic-richtext */ \"./node_modules/prismic-richtext/dist/prismic-richtext.min.js\");\n\nvar Component = __webpack_require__(/*! ./Component */ \"./src/Component.js\");\n\nmodule.exports = {\n  Date: PrismicHelpers.Date,\n  Elements: PrismicRichText.Elements,\n  Link: PrismicHelpers.Link,\n  RichText: Component[\"default\"]\n};\n\n/***/ }),\n\n/***/ \"./src/richtext.js\":\n/*!*************************!*\\\n  !*** ./src/richtext.js ***!\n  \\*************************/\n/*! exports provided: asText, renderRichText */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asText\", function() { return asText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderRichText\", function() { return renderRichText; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prismic_richtext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prismic-richtext */ \"./node_modules/prismic-richtext/dist/prismic-richtext.min.js\");\n/* harmony import */ var prismic_richtext__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prismic_richtext__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prismic_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prismic-helpers */ \"./node_modules/prismic-helpers/dist/prismic-helpers.min.js\");\n/* harmony import */ var prismic_helpers__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prismic_helpers__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _embeds__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./embeds */ \"./src/embeds.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar createScript = typeof window !== \"undefined\" ? __webpack_require__(/*! ./embeds */ \"./src/embeds.js\").createScript : function () {};\n\nfunction serialize(linkResolver, elements, type, element, content, children, index) {\n  if (elements[type]) {\n    return serializeElement(elements[type], type, element, content, children, index);\n  }\n\n  switch (type) {\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].heading1:\n      return serializeStandardTag('h1', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].heading2:\n      return serializeStandardTag('h2', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].heading3:\n      return serializeStandardTag('h3', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].heading4:\n      return serializeStandardTag('h4', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].heading5:\n      return serializeStandardTag('h5', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].heading6:\n      return serializeStandardTag('h6', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].paragraph:\n      return serializeStandardTag('p', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].preformatted:\n      return serializeStandardTag('pre', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].strong:\n      return serializeStandardTag('strong', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].em:\n      return serializeStandardTag('em', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].listItem:\n      return serializeStandardTag('li', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].oListItem:\n      return serializeStandardTag('li', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].list:\n      return serializeStandardTag('ul', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].oList:\n      return serializeStandardTag('ol', element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].image:\n      return serializeImage(linkResolver, element, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].embed:\n      return serializeEmbed(element, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].hyperlink:\n      return serializeHyperlink(linkResolver, element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].label:\n      return serializeLabel(element, children, index);\n\n    case prismic_richtext__WEBPACK_IMPORTED_MODULE_1__[\"Elements\"].span:\n      return serializeSpan(content);\n\n    default:\n      return null;\n  }\n}\n\nfunction propsWithUniqueKey() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var key = arguments.length > 1 ? arguments[1] : undefined;\n  return Object.assign(props, {\n    key: key\n  });\n}\n\nfunction serializeElement(Element, type, props, content, children, index) {\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(Element, _objectSpread({\n    key: \"element-\".concat(type, \"-\").concat(index + 1)\n  }, props, {\n    children: children && children.length ? children : undefined\n  }, type === 'image' ? {\n    src: props.url,\n    url: undefined\n  } : null));\n}\n\nfunction serializeStandardTag(tag, element, children, key) {\n  var props = element.label ? Object.assign({}, {\n    className: element.label\n  }) : {};\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(tag, propsWithUniqueKey(props, key), children);\n}\n\nfunction serializeHyperlink(linkResolver, element, children, key) {\n  var targetAttr = element.data.target ? {\n    target: element.data.target\n  } : {};\n  var relAttr = element.data.target ? {\n    rel: 'noopener'\n  } : {};\n  var props = Object.assign({\n    href: prismic_helpers__WEBPACK_IMPORTED_MODULE_2__[\"Link\"].url(element.data, linkResolver)\n  }, targetAttr, relAttr);\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('a', propsWithUniqueKey(props, key), children);\n}\n\nfunction serializeLabel(element, children, key) {\n  var props = element.data ? Object.assign({}, {\n    className: element.data.label\n  }) : {};\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('span', propsWithUniqueKey(props, key), children);\n}\n\nfunction serializeSpan(content) {\n  if (content) {\n    return content.split(\"\\n\").reduce(function (acc, p) {\n      if (acc.length === 0) {\n        return [p];\n      } else {\n        var brIndex = (acc.length + 1) / 2 - 1;\n        var br = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('br', propsWithUniqueKey({}, brIndex));\n        return acc.concat([br, p]);\n      }\n    }, []);\n  } else {\n    return null;\n  }\n}\n\nfunction serializeImage(linkResolver, element, key) {\n  var linkUrl = element.linkTo ? prismic_helpers__WEBPACK_IMPORTED_MODULE_2__[\"Link\"].url(element.linkTo, linkResolver) : null;\n  var linkTarget = element.linkTo && element.linkTo.target ? {\n    target: element.linkTo.target\n  } : {};\n  var relAttr = linkTarget.target ? {\n    rel: 'noopener'\n  } : {};\n  var img = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('img', {\n    src: element.url,\n    alt: element.alt || ''\n  });\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('p', propsWithUniqueKey({\n    className: [element.label || '', 'block-img'].join(' ')\n  }, key), linkUrl ? Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('a', Object.assign({\n    href: linkUrl\n  }, linkTarget, relAttr), img) : img);\n}\n\nfunction serializeEmbed(element, key) {\n  if (_embeds__WEBPACK_IMPORTED_MODULE_3__[\"embeds\"][element.oembed.provider_name]) {\n    createScript(_embeds__WEBPACK_IMPORTED_MODULE_3__[\"embeds\"][element.oembed.provider_name]);\n  }\n\n  var className = \"embed embed-\".concat(element.oembed.provider_name.toLowerCase());\n  var props = Object.assign({\n    \"data-oembed\": element.oembed.embed_url,\n    \"data-oembed-type\": element.oembed.type,\n    \"data-oembed-provider\": element.oembed.provider_name,\n    ref: function ref(_ref) {\n      if (_embeds__WEBPACK_IMPORTED_MODULE_3__[\"embeds\"][element.oembed.provider_name]) {\n        _embeds__WEBPACK_IMPORTED_MODULE_3__[\"embeds\"][element.oembed.provider_name].load(_ref);\n      }\n    }\n  }, element.label ? {\n    className: \"\".concat(className, \" \").concat(element.label)\n  } : {\n    className: className\n  });\n  var embedHtml = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('div', {\n    dangerouslySetInnerHTML: {\n      __html: element.oembed.html\n    }\n  });\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])('div', propsWithUniqueKey(props, key), embedHtml);\n}\n\nvar asText = function asText(structuredText) {\n  if (Object.prototype.toString.call(structuredText) !== '[object Array]') {\n    console.warn(\"Rich text argument should be an Array. Received \".concat(_typeof(structuredText)));\n    return null;\n  }\n\n  return prismic_richtext__WEBPACK_IMPORTED_MODULE_1___default.a.asText(structuredText);\n};\nvar renderRichText = function renderRichText(richText, linkResolver, htmlSerializer) {\n  var Component = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : react__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"];\n  var elements = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var args = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n  if (Object.prototype.toString.call(richText) !== '[object Array]') {\n    console.warn(\"Rich text argument should be an Array. Received \".concat(_typeof(richText)));\n    return null;\n  }\n\n  var serializedChildren = prismic_richtext__WEBPACK_IMPORTED_MODULE_1___default.a.serialize(richText, serialize.bind(null, linkResolver, elements), htmlSerializer);\n  return Object(react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"])(Component, args, serializedChildren);\n};\n\n/***/ }),\n\n/***/ 0:\n/*!****************************!*\\\n  !*** multi ./src/index.js ***!\n  \\****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! /Users/hvillain/Libs/prismic-reactjs/src/index.js */\"./src/index.js\");\n\n\n/***/ }),\n\n/***/ \"react\":\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prismic-reactjs/dist/prismic-reactjs.js\n");

/***/ }),

/***/ "./pages/press/[uid].js":
/*!******************************!*\
  !*** ./pages/press/[uid].js ***!
  \******************************/
/*! exports provided: __N_SSG, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__N_SSG\", function() { return __N_SSG; });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd */ \"./node_modules/antd/es/index.js\");\n/* harmony import */ var _components_Navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/Navigation */ \"./components/Navigation.js\");\n/* harmony import */ var prismic_reactjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prismic-reactjs */ \"./node_modules/prismic-reactjs/dist/prismic-reactjs.js\");\n/* harmony import */ var prismic_reactjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prismic_reactjs__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _prismic_configuration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../prismic-configuration */ \"./prismic-configuration.js\");\n\n\n\nvar _jsxFileName = \"/Users/paul/gallery-prismic/pages/press/[uid].js\",\n    _this = undefined;\n\n\n\n\n\n\n\n\nvar Article = function Article(_ref) {\n  var article = _ref.article;\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(_components_Navigation__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(antd__WEBPACK_IMPORTED_MODULE_3__[\"Row\"], {\n      justify: \"center\",\n      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(antd__WEBPACK_IMPORTED_MODULE_3__[\"Col\"], {\n        span: 20,\n        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n          children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"h1\", {\n            className: \"title\",\n            children: data.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 9\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(antd__WEBPACK_IMPORTED_MODULE_3__[\"Col\"], {\n          span: 24,\n          className: \"press\",\n          children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"img\", {\n            src: article.image.url,\n            width: 400,\n            height: 400,\n            alt: article.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 9\n          }, _this), prismic_reactjs__WEBPACK_IMPORTED_MODULE_5__[\"RichText\"].render(article.main), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(antd__WEBPACK_IMPORTED_MODULE_3__[\"Button\"], {\n            children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {\n              href: \"/press\",\n              children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"a\", {\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 37\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 9\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = Article;\nvar __N_SSG = true;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Article);\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvcHJlc3MvW3VpZF0uanM/MjhlMCJdLCJuYW1lcyI6WyJBcnRpY2xlIiwiYXJ0aWNsZSIsImRhdGEiLCJ0aXRsZSIsImltYWdlIiwidXJsIiwiUmljaFRleHQiLCJyZW5kZXIiLCJtYWluIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLElBQU1BLE9BQU8sR0FBRyxTQUFWQSxPQUFVO0FBQUEsTUFBR0MsT0FBSCxRQUFHQSxPQUFIO0FBQUEsc0JBQ1I7QUFBQSw0QkFDQSxxRUFBQyw4REFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBREEsZUFFQSxxRUFBQyx3Q0FBRDtBQUFLLGFBQU8sRUFBQyxRQUFiO0FBQUEsNkJBQ0EscUVBQUMsd0NBQUQ7QUFBSyxZQUFJLEVBQUUsRUFBWDtBQUFBLGdDQUNBO0FBQUEsaUNBQ0E7QUFBSSxxQkFBUyxFQUFDLE9BQWQ7QUFBQSxzQkFBdUJDLElBQUksQ0FBQ0M7QUFBNUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBREEsZUFJQSxxRUFBQyx3Q0FBRDtBQUFLLGNBQUksRUFBRSxFQUFYO0FBQWUsbUJBQVMsRUFBQyxPQUF6QjtBQUFBLGtDQUNBO0FBQUssZUFBRyxFQUFFRixPQUFPLENBQUNHLEtBQVIsQ0FBY0MsR0FBeEI7QUFBNkIsaUJBQUssRUFBRSxHQUFwQztBQUF5QyxrQkFBTSxFQUFFLEdBQWpEO0FBQXNELGVBQUcsRUFBRUosT0FBTyxDQUFDRTtBQUFuRTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQURBLEVBRUNHLHdEQUFRLENBQUNDLE1BQVQsQ0FBZ0JOLE9BQU8sQ0FBQ08sSUFBeEIsQ0FGRCxlQUdBLHFFQUFDLDJDQUFEO0FBQUEsbUNBQVEscUVBQUMsZ0RBQUQ7QUFBTSxrQkFBSSxFQUFDLFFBQVg7QUFBQSxxQ0FBb0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBcEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFSO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBSEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQUpBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFGQTtBQUFBLGtCQURRO0FBQUEsQ0FBaEI7O0tBQU1SLE87O0FBcUNTQSxzRUFBZiIsImZpbGUiOiIuL3BhZ2VzL3ByZXNzL1t1aWRdLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluayc7XG5pbXBvcnQgeyBSb3csIENvbCxCdXR0b24gfSBmcm9tICdhbnRkJztcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvTmF2aWdhdGlvbic7XG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gJ3ByaXNtaWMtcmVhY3Rqcyc7XG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tICcuLi8uLi9wcmlzbWljLWNvbmZpZ3VyYXRpb24nO1xuXG5cblxuY29uc3QgQXJ0aWNsZSA9ICh7IGFydGljbGUgfSkgPT4gKFxuICAgICAgICA8PlxuICAgICAgICA8TmF2aWdhdGlvbi8+XG4gICAgICAgIDxSb3cganVzdGlmeT1cImNlbnRlclwiPlxuICAgICAgICA8Q29sIHNwYW49ezIwfT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRpdGxlXCI+e2RhdGEudGl0bGV9PC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxDb2wgc3Bhbj17MjR9IGNsYXNzTmFtZT1cInByZXNzXCI+XG4gICAgICAgIDxpbWcgc3JjPXthcnRpY2xlLmltYWdlLnVybH0gd2lkdGg9ezQwMH0gaGVpZ2h0PXs0MDB9IGFsdD17YXJ0aWNsZS50aXRsZX0gLz4gIFxuICAgICAgICB7UmljaFRleHQucmVuZGVyKGFydGljbGUubWFpbil9XG4gICAgICAgIDxCdXR0b24+PExpbmsgaHJlZj1cIi9wcmVzc1wiPjxhPkJhY2s8L2E+PC9MaW5rPjwvQnV0dG9uPlxuICAgICAgICA8L0NvbD5cbiAgICAgICAgPC9Db2w+XG4gICAgICAgIDwvUm93PlxuICAgICAgICA8Lz5cbilcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdGF0aWNQcm9wcyh7IHBhcmFtcywgcHJldmlldyA9IG51bGwsIHByZXZpZXdEYXRhID0ge30gfSkge1xuICBjb25zdCB7IHJlZiB9ID0gcHJldmlld0RhdGFcbiAgY29uc3QgYXJ0aWNsZSA9IGF3YWl0IENsaWVudCgpLmdldEJ5VUlEKFwicHJlc3NcIiwgcGFyYW1zLnVpZCwgcmVmID8geyByZWYgfSA6IG51bGwpIHx8IHt9XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHByZXZpZXcsXG4gICAgICBhcnRpY2xlXG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0YXRpY1BhdGhzKCkge1xuICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCBxdWVyeVJlcGVhdGFibGVEb2N1bWVudHMoKGRvYykgPT4gZG9jLnR5cGUgPT09ICdwcmVzcycpXG4gIHJldHVybiB7XG4gICAgcGF0aHM6IGRvY3VtZW50cy5tYXAoZG9jID0+IGAvcHJlc3MvJHtkb2MudWlkfWApLFxuICAgIGZhbGxiYWNrOiB0cnVlLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFydGljbGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/press/[uid].js\n");

/***/ }),

/***/ "./prismic-configuration.js":
/*!**********************************!*\
  !*** ./prismic-configuration.js ***!
  \**********************************/
/*! exports provided: apiEndpoint, accessToken, client, Client, linkResolver, hrefResolver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"apiEndpoint\", function() { return apiEndpoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"accessToken\", function() { return accessToken; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"client\", function() { return client; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Client\", function() { return Client; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"linkResolver\", function() { return linkResolver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hrefResolver\", function() { return hrefResolver; });\n/* harmony import */ var prismic_javascript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prismic-javascript */ \"./node_modules/prismic-javascript/esm/prismic-javascript.mjs\");\n\nvar apiEndpoint = 'https://lightfoot.cdn.prismic.io/api/v2';\nvar accessToken = process.env.PRISMIC_TOKEN;\nvar client = prismic_javascript__WEBPACK_IMPORTED_MODULE_0__[\"default\"].client(apiEndpoint, {\n  accessToken: accessToken\n});\nvar Client = function Client() {\n  var req = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return prismic_javascript__WEBPACK_IMPORTED_MODULE_0__[\"default\"].client(apiEndpoint, createClientOptions(req, accessToken));\n};\n_c = Client;\nvar linkResolver = function linkResolver(doc) {\n  if (doc.type === 'press') {\n    return \"/press/\".concat(doc.uid);\n  }\n\n  return '/';\n};\nvar hrefResolver = function hrefResolver(doc) {\n  if (doc.type === 'press') {\n    return \"/press/\".concat(doc.uid);\n  }\n\n  return '/';\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Client\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcHJpc21pYy1jb25maWd1cmF0aW9uLmpzP2E4YjIiXSwibmFtZXMiOlsiYXBpRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbiIsInByb2Nlc3MiLCJlbnYiLCJQUklTTUlDX1RPS0VOIiwiY2xpZW50IiwiUHJpc21pYyIsIkNsaWVudCIsInJlcSIsImNyZWF0ZUNsaWVudE9wdGlvbnMiLCJsaW5rUmVzb2x2ZXIiLCJkb2MiLCJ0eXBlIiwidWlkIiwiaHJlZlJlc29sdmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDTyxJQUFNQSxXQUFXLEdBQUcseUNBQXBCO0FBQ0EsSUFBTUMsV0FBVyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsYUFBaEM7QUFDQSxJQUFNQyxNQUFNLEdBQUdDLDBEQUFPLENBQUNELE1BQVIsQ0FBZUwsV0FBZixFQUE0QjtBQUFFQyxhQUFXLEVBQVhBO0FBQUYsQ0FBNUIsQ0FBZjtBQUVBLElBQU1NLE1BQU0sR0FBRyxTQUFUQSxNQUFTO0FBQUEsTUFBQ0MsR0FBRCx1RUFBTyxJQUFQO0FBQUEsU0FDcEJGLDBEQUFPLENBQUNELE1BQVIsQ0FBZUwsV0FBZixFQUE0QlMsbUJBQW1CLENBQUNELEdBQUQsRUFBTVAsV0FBTixDQUEvQyxDQURvQjtBQUFBLENBQWY7S0FBTU0sTTtBQUlOLElBQU1HLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLEdBQUQsRUFBUztBQUVuQyxNQUFJQSxHQUFHLENBQUNDLElBQUosS0FBYSxPQUFqQixFQUEwQjtBQUN4Qiw0QkFBaUJELEdBQUcsQ0FBQ0UsR0FBckI7QUFDRDs7QUFDSCxTQUFPLEdBQVA7QUFFQyxDQVBNO0FBU0EsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ0gsR0FBRCxFQUFTO0FBRW5DLE1BQUlBLEdBQUcsQ0FBQ0MsSUFBSixLQUFhLE9BQWpCLEVBQTBCO0FBQ3hCLDRCQUFpQkQsR0FBRyxDQUFDRSxHQUFyQjtBQUNEOztBQUVELFNBQU8sR0FBUDtBQUNELENBUE0iLCJmaWxlIjoiLi9wcmlzbWljLWNvbmZpZ3VyYXRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJpc21pYyBmcm9tIFwicHJpc21pYy1qYXZhc2NyaXB0XCI7XG5leHBvcnQgY29uc3QgYXBpRW5kcG9pbnQgPSAnaHR0cHM6Ly9saWdodGZvb3QuY2RuLnByaXNtaWMuaW8vYXBpL3YyJ1xuZXhwb3J0IGNvbnN0IGFjY2Vzc1Rva2VuID0gcHJvY2Vzcy5lbnYuUFJJU01JQ19UT0tFTjtcbmV4cG9ydCBjb25zdCBjbGllbnQgPSBQcmlzbWljLmNsaWVudChhcGlFbmRwb2ludCwgeyBhY2Nlc3NUb2tlbiB9KTtcblxuZXhwb3J0IGNvbnN0IENsaWVudCA9IChyZXEgPSBudWxsKSA9PiAoXG4gIFByaXNtaWMuY2xpZW50KGFwaUVuZHBvaW50LCBjcmVhdGVDbGllbnRPcHRpb25zKHJlcSwgYWNjZXNzVG9rZW4pKVxuKVxuXG5leHBvcnQgY29uc3QgbGlua1Jlc29sdmVyID0gKGRvYykgPT4ge1xuXG4gIGlmIChkb2MudHlwZSA9PT0gJ3ByZXNzJykge1xuICAgIHJldHVybiBgL3ByZXNzLyR7ZG9jLnVpZH1gXG4gIH1cbnJldHVybiAnLydcblxufVxuXG5leHBvcnQgY29uc3QgaHJlZlJlc29sdmVyID0gKGRvYykgPT4ge1xuXG4gIGlmIChkb2MudHlwZSA9PT0gJ3ByZXNzJykge1xuICAgIHJldHVybiBgL3ByZXNzLyR7ZG9jLnVpZH1gXG4gIH1cblxuICByZXR1cm4gJy8nXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./prismic-configuration.js\n");

/***/ })

})